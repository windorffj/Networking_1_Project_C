
Networking1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004460  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800485c  0800485c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004864  08004864  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800486c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  200001e4  08004a50  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08004a50  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eee6  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002283  00000000  00000000  0002f0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  00031380  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  00032038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002350e  00000000  00000000  00032bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aede  00000000  00000000  000560e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfe7f  00000000  00000000  00060fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00130e43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b8  00000000  00000000  00130ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004618 	.word	0x08004618

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08004618 	.word	0x08004618

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <cm_init>:
static uint16_t Pin;
enum STATE {IDLE,BUSY,COLLISION};
enum STATE state;
static  int flag;

void cm_init(GPIO_TypeDef* loc, uint16_t pin){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	807b      	strh	r3, [r7, #2]
  	Pin = pin;
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <cm_init+0x30>)
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	8013      	strh	r3, [r2, #0]
  	location = loc;
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <cm_init+0x34>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6013      	str	r3, [r2, #0]
  	state = BUSY;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <cm_init+0x38>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
  	flag = 1; //start it high because the most likely behavior is that it is in idle
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <cm_init+0x3c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	601a      	str	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	20000204 	.word	0x20000204
 80005f4:	20000200 	.word	0x20000200
 80005f8:	20000464 	.word	0x20000464
 80005fc:	20000208 	.word	0x20000208

08000600 <cm_sc_inter>:

void cm_sc_inter(TIM_HandleTypeDef *htim, int flag){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060a:	b672      	cpsid	i

	//switch polarity that we are on
	__disable_irq();

	//reset the timer
	HAL_TIM_Base_Stop_IT(htim);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f002 faf6 	bl	8002bfe <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(htim);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f002 facb 	bl	8002bb6 <HAL_TIM_Base_Start_IT>

	//we are busy
  	state = BUSY;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <cm_sc_inter+0x30>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000626:	b662      	cpsie	i
  	__enable_irq();
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000464 	.word	0x20000464

08000634 <cm_tim_inter>:

void cm_tim_inter(int pin_status){
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	if(pin_status == flag){ //if the input has not changed
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <cm_tim_inter+0x3c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	429a      	cmp	r2, r3
 8000644:	d10a      	bne.n	800065c <cm_tim_inter+0x28>
		if(pin_status == 1){ //check where the pin is at, if it is at low then it is a collision
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d103      	bne.n	8000654 <cm_tim_inter+0x20>
			state = IDLE;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <cm_tim_inter+0x40>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
			state = COLLISION;
		}
	} else {
		flag = pin_status;
	}
}
 8000652:	e006      	b.n	8000662 <cm_tim_inter+0x2e>
			state = COLLISION;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <cm_tim_inter+0x40>)
 8000656:	2202      	movs	r2, #2
 8000658:	701a      	strb	r2, [r3, #0]
}
 800065a:	e002      	b.n	8000662 <cm_tim_inter+0x2e>
		flag = pin_status;
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <cm_tim_inter+0x3c>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6013      	str	r3, [r2, #0]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000208 	.word	0x20000208
 8000674:	20000464 	.word	0x20000464

08000678 <cm_get_state>:

//idle flag is bit 0
//busy flag is bit 1
//collision flag is bit 2
uint16_t cm_get_state(){
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
	uint16_t ret = 0x7; //all lights on in error state
 800067e:	2307      	movs	r3, #7
 8000680:	80fb      	strh	r3, [r7, #6]
  	switch(state){
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <cm_get_state+0x3c>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d006      	beq.n	8000698 <cm_get_state+0x20>
 800068a:	2b02      	cmp	r3, #2
 800068c:	d007      	beq.n	800069e <cm_get_state+0x26>
 800068e:	2b00      	cmp	r3, #0
 8000690:	d108      	bne.n	80006a4 <cm_get_state+0x2c>
    	case IDLE:
      		ret = 0x1;
 8000692:	2301      	movs	r3, #1
 8000694:	80fb      	strh	r3, [r7, #6]
      		break;
 8000696:	e005      	b.n	80006a4 <cm_get_state+0x2c>
    	case BUSY:
      		ret = 0x2;
 8000698:	2302      	movs	r3, #2
 800069a:	80fb      	strh	r3, [r7, #6]
      		break;
 800069c:	e002      	b.n	80006a4 <cm_get_state+0x2c>
    	case COLLISION:
      		ret = 0x4;
 800069e:	2304      	movs	r3, #4
 80006a0:	80fb      	strh	r3, [r7, #6]
      		break;
 80006a2:	bf00      	nop
  	}
  	return ret;
 80006a4:	88fb      	ldrh	r3, [r7, #6]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000464 	.word	0x20000464

080006b8 <gen_crc>:
 */

#include "crc.h"


uint8_t gen_crc(uint8_t *data, uint8_t len, uint8_t crc_given){
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
 80006c4:	4613      	mov	r3, r2
 80006c6:	70bb      	strb	r3, [r7, #2]
    uint8_t crc = 0x00;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
    uint8_t i, j;
    for (i = 0; i < len; i++) {
 80006cc:	2300      	movs	r3, #0
 80006ce:	73bb      	strb	r3, [r7, #14]
 80006d0:	e021      	b.n	8000716 <gen_crc+0x5e>
        crc ^= data[i];
 80006d2:	7bbb      	ldrb	r3, [r7, #14]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	4053      	eors	r3, r2
 80006de:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	737b      	strb	r3, [r7, #13]
 80006e4:	e011      	b.n	800070a <gen_crc+0x52>
            if ((crc & 0x80) != 0)
 80006e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	da07      	bge.n	80006fe <gen_crc+0x46>
                crc = (uint8_t)((crc << 1) ^ CRC_CHECK);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	f083 0307 	eor.w	r3, r3, #7
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e002      	b.n	8000704 <gen_crc+0x4c>
            else
                crc <<= 1;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 8000704:	7b7b      	ldrb	r3, [r7, #13]
 8000706:	3301      	adds	r3, #1
 8000708:	737b      	strb	r3, [r7, #13]
 800070a:	7b7b      	ldrb	r3, [r7, #13]
 800070c:	2b07      	cmp	r3, #7
 800070e:	d9ea      	bls.n	80006e6 <gen_crc+0x2e>
    for (i = 0; i < len; i++) {
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	3301      	adds	r3, #1
 8000714:	73bb      	strb	r3, [r7, #14]
 8000716:	7bba      	ldrb	r2, [r7, #14]
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	429a      	cmp	r2, r3
 800071c:	d3d9      	bcc.n	80006d2 <gen_crc+0x1a>
        }
    }
    if(crc_given != 0x00){
 800071e:	78bb      	ldrb	r3, [r7, #2]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <gen_crc+0x74>
    	crc ^= crc_given; //this should return 0x00 if correct
 8000724:	7bfa      	ldrb	r2, [r7, #15]
 8000726:	78bb      	ldrb	r3, [r7, #2]
 8000728:	4053      	eors	r3, r2
 800072a:	73fb      	strb	r3, [r7, #15]
    }
    return crc;
 800072c:	7bfb      	ldrb	r3, [r7, #15]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	flag = 0;
 8000742:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <main+0x17c>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
	tx_flag = 0;
 8000748:	4b5c      	ldr	r3, [pc, #368]	; (80008bc <main+0x180>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
	rx_flag = 0;
 800074e:	4b5c      	ldr	r3, [pc, #368]	; (80008c0 <main+0x184>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
	run = true;
 8000754:	4b5b      	ldr	r3, [pc, #364]	; (80008c4 <main+0x188>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f001 f9d5 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f8cb 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 fa3b 	bl	8000bdc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000766:	f000 f927 	bl	80009b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800076a:	f000 f971 	bl	8000a50 <MX_TIM3_Init>
  MX_TIM4_Init();
 800076e:	f000 f9bd 	bl	8000aec <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000772:	f000 fa09 	bl	8000b88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   cm_init(GPIOC,Receiver_Pin); //set the channel monitor to watch the receive pin
 8000776:	2104      	movs	r1, #4
 8000778:	4853      	ldr	r0, [pc, #332]	; (80008c8 <main+0x18c>)
 800077a:	f7ff ff21 	bl	80005c0 <cm_init>
   tm_init(GPIOC, Transmitter_Pin, &htim4, &tx_struct);
 800077e:	4b53      	ldr	r3, [pc, #332]	; (80008cc <main+0x190>)
 8000780:	4a53      	ldr	r2, [pc, #332]	; (80008d0 <main+0x194>)
 8000782:	2110      	movs	r1, #16
 8000784:	4850      	ldr	r0, [pc, #320]	; (80008c8 <main+0x18c>)
 8000786:	f001 f805 	bl	8001794 <tm_init>
   rc_init((uint8_t*)&store, &htim2, &huart2, &rx_struct);
 800078a:	4b52      	ldr	r3, [pc, #328]	; (80008d4 <main+0x198>)
 800078c:	4a52      	ldr	r2, [pc, #328]	; (80008d8 <main+0x19c>)
 800078e:	4953      	ldr	r1, [pc, #332]	; (80008dc <main+0x1a0>)
 8000790:	4853      	ldr	r0, [pc, #332]	; (80008e0 <main+0x1a4>)
 8000792:	f000 fc0b 	bl	8000fac <rc_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   //HAL_GPIO_WritePin(GPIOA,Test_Collision_Pin,testset); //set idle

   uint8_t intro[61] = "Enter the destination then the message with a space between\r\n";
 8000796:	4b53      	ldr	r3, [pc, #332]	; (80008e4 <main+0x1a8>)
 8000798:	f107 040c 	add.w	r4, r7, #12
 800079c:	461d      	mov	r5, r3
 800079e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007ae:	c407      	stmia	r4!, {r0, r1, r2}
 80007b0:	7023      	strb	r3, [r4, #0]

   HAL_UART_Transmit(&huart2,(uint8_t *)intro,61,0xFFFF);
 80007b2:	f107 010c 	add.w	r1, r7, #12
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	223d      	movs	r2, #61	; 0x3d
 80007bc:	4846      	ldr	r0, [pc, #280]	; (80008d8 <main+0x19c>)
 80007be:	f002 fe11 	bl	80033e4 <HAL_UART_Transmit>

   /* Enable the UART Data Register not empty Interrupt */
   __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80007c2:	4b45      	ldr	r3, [pc, #276]	; (80008d8 <main+0x19c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	68da      	ldr	r2, [r3, #12]
 80007c8:	4b43      	ldr	r3, [pc, #268]	; (80008d8 <main+0x19c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f042 0220 	orr.w	r2, r2, #32
 80007d0:	60da      	str	r2, [r3, #12]

   char buff2[ 6 ] = "\r\n>>>";
 80007d2:	4a45      	ldr	r2, [pc, #276]	; (80008e8 <main+0x1ac>)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007da:	6018      	str	r0, [r3, #0]
 80007dc:	3304      	adds	r3, #4
 80007de:	8019      	strh	r1, [r3, #0]

   HAL_UART_Transmit ( &huart2, (uint8_t*)buff2, strlen( buff2 ), 10 );
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fd14 	bl	8000210 <strlen>
 80007e8:	4603      	mov	r3, r0
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	1d39      	adds	r1, r7, #4
 80007ee:	230a      	movs	r3, #10
 80007f0:	4839      	ldr	r0, [pc, #228]	; (80008d8 <main+0x19c>)
 80007f2:	f002 fdf7 	bl	80033e4 <HAL_UART_Transmit>
   memset( buff, 0, 258 );
 80007f6:	f44f 7281 	mov.w	r2, #258	; 0x102
 80007fa:	2100      	movs	r1, #0
 80007fc:	483b      	ldr	r0, [pc, #236]	; (80008ec <main+0x1b0>)
 80007fe:	f003 f9af 	bl	8003b60 <memset>

   HAL_TIM_Base_Start_IT(&htim3);
 8000802:	483b      	ldr	r0, [pc, #236]	; (80008f0 <main+0x1b4>)
 8000804:	f002 f9d7 	bl	8002bb6 <HAL_TIM_Base_Start_IT>

  while (1){

	  if(tx_flag == 1){
 8000808:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <main+0x180>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d104      	bne.n	800081a <main+0xde>
		  tx_flag = 0;
 8000810:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <main+0x180>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
		  tm_calc_next();
 8000816:	f001 f897 	bl	8001948 <tm_calc_next>
	  }

	  if(flag == 1){
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <main+0x17c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d129      	bne.n	8000876 <main+0x13a>
		  cm_sc_inter(&htim3, (GPIOC->IDR&(1<<2))>>2);
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <main+0x18c>)
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	4619      	mov	r1, r3
 800082e:	4830      	ldr	r0, [pc, #192]	; (80008f0 <main+0x1b4>)
 8000830:	f7ff fee6 	bl	8000600 <cm_sc_inter>
		  flag = 0;
 8000834:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <main+0x17c>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
		  if(!run){
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <main+0x188>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f083 0301 	eor.w	r3, r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d013      	beq.n	8000870 <main+0x134>
			  int check = rc_receive();
 8000848:	f000 fbd2 	bl	8000ff0 <rc_receive>
 800084c:	64f8      	str	r0, [r7, #76]	; 0x4c
			  if(check == 1){
 800084e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000850:	2b01      	cmp	r3, #1
 8000852:	d10a      	bne.n	800086a <main+0x12e>
				  HAL_UART_Transmit ( &huart2, (uint8_t*)buff2, strlen( buff2 ), 10 ); //send the end of character
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fcda 	bl	8000210 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	1d39      	adds	r1, r7, #4
 8000862:	230a      	movs	r3, #10
 8000864:	481c      	ldr	r0, [pc, #112]	; (80008d8 <main+0x19c>)
 8000866:	f002 fdbd 	bl	80033e4 <HAL_UART_Transmit>
			  }
			  rx_flag = 0; //for the reset if idle
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <main+0x184>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
		  }
		  GPIO_Set_Lights();
 8000870:	f000 fb6c 	bl	8000f4c <GPIO_Set_Lights>
 8000874:	e7c8      	b.n	8000808 <main+0xcc>
	  } else if(flag == 2){
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <main+0x17c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d110      	bne.n	80008a0 <main+0x164>
		  cm_tim_inter((GPIOC->IDR&(1<<2))>>2);
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <main+0x18c>)
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fed3 	bl	8000634 <cm_tim_inter>
		  flag = 0;
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <main+0x17c>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
		  GPIO_Set_Lights();
 8000894:	f000 fb5a 	bl	8000f4c <GPIO_Set_Lights>
		  run = true; //reset the GPIO setup to go back to watching
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <main+0x188>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e7b3      	b.n	8000808 <main+0xcc>
	  } else if((huart2.Instance->SR & UART_IT_RXNE) != RESET) {
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <main+0x19c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <main+0x1b8>)
 80008a8:	4013      	ands	r3, r2
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0ac      	beq.n	8000808 <main+0xcc>
		  UART_Receive(&huart2);
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <main+0x19c>)
 80008b0:	f000 fa7e 	bl	8000db0 <UART_Receive>
	  if(tx_flag == 1){
 80008b4:	e7a8      	b.n	8000808 <main+0xcc>
 80008b6:	bf00      	nop
 80008b8:	20000210 	.word	0x20000210
 80008bc:	20000218 	.word	0x20000218
 80008c0:	2000021c 	.word	0x2000021c
 80008c4:	20000214 	.word	0x20000214
 80008c8:	40020800 	.word	0x40020800
 80008cc:	20000328 	.word	0x20000328
 80008d0:	20000468 	.word	0x20000468
 80008d4:	20000220 	.word	0x20000220
 80008d8:	2000062c 	.word	0x2000062c
 80008dc:	200005ec 	.word	0x200005ec
 80008e0:	2000020c 	.word	0x2000020c
 80008e4:	08004630 	.word	0x08004630
 80008e8:	08004670 	.word	0x08004670
 80008ec:	200004a8 	.word	0x200004a8
 80008f0:	200005ac 	.word	0x200005ac
 80008f4:	10000020 	.word	0x10000020

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	2234      	movs	r2, #52	; 0x34
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 f92a 	bl	8003b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <SystemClock_Config+0xb8>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <SystemClock_Config+0xb8>)
 8000926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <SystemClock_Config+0xb8>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000938:	2300      	movs	r3, #0
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <SystemClock_Config+0xbc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <SystemClock_Config+0xbc>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <SystemClock_Config+0xbc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	2301      	movs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000960:	2310      	movs	r3, #16
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000964:	2300      	movs	r3, #0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f001 fe9d 	bl	80026ac <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000978:	f000 fb10 	bl	8000f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fc20 	bl	80021dc <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009a2:	f000 fafb 	bl	8000f9c <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3750      	adds	r7, #80	; 0x50
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009de:	220f      	movs	r2, #15
 80009e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 506-1;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009ea:	f240 12f9 	movw	r2, #505	; 0x1f9
 80009ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009fe:	f002 f8af 	bl	8002b60 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a08:	f000 fac8 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM2_Init+0x94>)
 8000a1a:	f002 fa23 	bl	8002e64 <HAL_TIM_ConfigClockSource>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a24:	f000 faba 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM2_Init+0x94>)
 8000a36:	f002 fc2f 	bl	8003298 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 faac 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200005ec 	.word	0x200005ec

08000a50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <MX_TIM3_Init+0x98>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a74:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 11-1;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a82:	220a      	movs	r2, #10
 8000a84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a94:	f002 f864 	bl	8002b60 <HAL_TIM_Base_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a9e:	f000 fa7d 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	4619      	mov	r1, r3
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000ab0:	f002 f9d8 	bl	8002e64 <HAL_TIM_ConfigClockSource>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000aba:	f000 fa6f 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000acc:	f002 fbe4 	bl	8003298 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000ad6:	f000 fa61 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200005ac 	.word	0x200005ac
 8000ae8:	40000400 	.word	0x40000400

08000aec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	463b      	mov	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_TIM4_Init+0x94>)
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <MX_TIM4_Init+0x98>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600-1;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_TIM4_Init+0x94>)
 8000b10:	f240 623f 	movw	r2, #1599	; 0x63f
 8000b14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_TIM4_Init+0x94>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5-1;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_TIM4_Init+0x94>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_TIM4_Init+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_TIM4_Init+0x94>)
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b2e:	4814      	ldr	r0, [pc, #80]	; (8000b80 <MX_TIM4_Init+0x94>)
 8000b30:	f002 f816 	bl	8002b60 <HAL_TIM_Base_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 fa2f 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_TIM4_Init+0x94>)
 8000b4c:	f002 f98a 	bl	8002e64 <HAL_TIM_ConfigClockSource>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000b56:	f000 fa21 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_TIM4_Init+0x94>)
 8000b68:	f002 fb96 	bl	8003298 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b72:	f000 fa13 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000468 	.word	0x20000468
 8000b84:	40000800 	.word	0x40000800

08000b88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <MX_USART2_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	f002 fbc3 	bl	800334a <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bca:	f000 f9e7 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000062c 	.word	0x2000062c
 8000bd8:	40004400 	.word	0x40004400

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <MX_GPIO_Init+0xcc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <MX_GPIO_Init+0xcc>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <MX_GPIO_Init+0xcc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0xcc>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a24      	ldr	r2, [pc, #144]	; (8000ca8 <MX_GPIO_Init+0xcc>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_GPIO_Init+0xcc>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_Light_Pin|Yellow_Light_Pin|Red_Light_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	21e0      	movs	r1, #224	; 0xe0
 8000c2e:	481f      	ldr	r0, [pc, #124]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c30:	f001 faa2 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Transmitter_GPIO_Port, Transmitter_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2110      	movs	r1, #16
 8000c38:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c3a:	f001 fa9d 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Receiver_Pin */
  GPIO_InitStruct.Pin = Receiver_Pin;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_GPIO_Init+0xd8>)
 8000c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c46:	2302      	movs	r3, #2
 8000c48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Receiver_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c52:	f001 f8ff 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_Light_Pin Yellow_Light_Pin Red_Light_Pin */
  GPIO_InitStruct.Pin = Green_Light_Pin|Yellow_Light_Pin|Red_Light_Pin;
 8000c56:	23e0      	movs	r3, #224	; 0xe0
 8000c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c6e:	f001 f8f1 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : Transmitter_Pin */
  GPIO_InitStruct.Pin = Transmitter_Pin;
 8000c72:	2310      	movs	r3, #16
 8000c74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Transmitter_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c8a:	f001 f8e3 	bl	8001e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2008      	movs	r0, #8
 8000c94:	f001 f8a7 	bl	8001de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c98:	2008      	movs	r0, #8
 8000c9a:	f001 f8c0 	bl	8001e1e <HAL_NVIC_EnableIRQ>

}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	10310000 	.word	0x10310000

08000cb8 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]

  if(GPIO_Pin == Receiver_Pin)
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d11c      	bne.n	8000d02 <HAL_GPIO_EXTI_Callback+0x4a>
  {
	  //if(flag == 0){
		  flag = 1;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x54>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
		  rx_flag = 2;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x58>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	601a      	str	r2, [r3, #0]

		  //only trigger timer start this if not receiving already
		  if(run){
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d006      	beq.n	8000cea <HAL_GPIO_EXTI_Callback+0x32>
			  HAL_TIM_Base_Start_IT(&htim2);
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x60>)
 8000cde:	f001 ff6a 	bl	8002bb6 <HAL_TIM_Base_Start_IT>
			  run = false;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
			  __enable_irq();
		  }
	  //}

  }
}
 8000ce8:	e00b      	b.n	8000d02 <HAL_GPIO_EXTI_Callback+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000cea:	b672      	cpsid	i
			  HAL_TIM_Base_Stop_IT(&htim2);
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x60>)
 8000cee:	f001 ff86 	bl	8002bfe <HAL_TIM_Base_Stop_IT>
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x60>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
			  HAL_TIM_Base_Start_IT(&htim2);
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x60>)
 8000cfc:	f001 ff5b 	bl	8002bb6 <HAL_TIM_Base_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d00:	b662      	cpsie	i
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000210 	.word	0x20000210
 8000d10:	2000021c 	.word	0x2000021c
 8000d14:	20000214 	.word	0x20000214
 8000d18:	200005ec 	.word	0x200005ec

08000d1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim3.Instance){
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d107      	bne.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0x24>
    	if(flag == 0){
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d124      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x66>
    		flag = 2;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	601a      	str	r2, [r3, #0]
    			run = true;
    		}
    	}
    }

}
 8000d3e:	e020      	b.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x66>
    } else if(htim->Instance == htim4.Instance){
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d105      	bne.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x3c>
    	tm_change_pin();
 8000d4c:	f000 fe64 	bl	8001a18 <tm_change_pin>
    	tx_flag = 1;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	e014      	b.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x66>
    } else if(htim->Instance == htim2.Instance){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d10e      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x66>
    	if(rx_flag != 2){
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d00a      	beq.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x66>
    		int ret = rc_timeout((uint8_t*)&store, &rx_struct);
 8000d6c:	490d      	ldr	r1, [pc, #52]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d70:	f000 f9d8 	bl	8001124 <rc_timeout>
 8000d74:	60f8      	str	r0, [r7, #12]
    		if(ret == 1){
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d102      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x66>
    			run = true;
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200005ac 	.word	0x200005ac
 8000d90:	20000210 	.word	0x20000210
 8000d94:	20000468 	.word	0x20000468
 8000d98:	20000218 	.word	0x20000218
 8000d9c:	200005ec 	.word	0x200005ec
 8000da0:	2000021c 	.word	0x2000021c
 8000da4:	20000220 	.word	0x20000220
 8000da8:	2000020c 	.word	0x2000020c
 8000dac:	20000214 	.word	0x20000214

08000db0 <UART_Receive>:

void UART_Receive(UART_HandleTypeDef *huart){
 8000db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db2:	b095      	sub	sp, #84	; 0x54
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	466b      	mov	r3, sp
 8000dba:	461e      	mov	r6, r3
	char buff2[ 6 ] = "\r\n>>>";
 8000dbc:	4a60      	ldr	r2, [pc, #384]	; (8000f40 <UART_Receive+0x190>)
 8000dbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc6:	6018      	str	r0, [r3, #0]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	8019      	strh	r1, [r3, #0]

	HAL_UART_Receive( huart, (uint8_t*)buff, 258, 100 );
 8000dcc:	2364      	movs	r3, #100	; 0x64
 8000dce:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000dd2:	495c      	ldr	r1, [pc, #368]	; (8000f44 <UART_Receive+0x194>)
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f002 fb9e 	bl	8003516 <HAL_UART_Receive>
	char point[strlen(buff)];
 8000dda:	485a      	ldr	r0, [pc, #360]	; (8000f44 <UART_Receive+0x194>)
 8000ddc:	f7ff fa18 	bl	8000210 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	3b01      	subs	r3, #1
 8000de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000de6:	4601      	mov	r1, r0
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	f04f 0400 	mov.w	r4, #0
 8000df4:	00d4      	lsls	r4, r2, #3
 8000df6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000dfa:	00cb      	lsls	r3, r1, #3
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	f04f 0400 	mov.w	r4, #0
 8000e0a:	00d4      	lsls	r4, r2, #3
 8000e0c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e10:	00cb      	lsls	r3, r1, #3
 8000e12:	1dc3      	adds	r3, r0, #7
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	ebad 0d03 	sub.w	sp, sp, r3
 8000e1c:	466b      	mov	r3, sp
 8000e1e:	3300      	adds	r3, #0
 8000e20:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i < strlen(buff); i++){
 8000e22:	2300      	movs	r3, #0
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e26:	e00b      	b.n	8000e40 <UART_Receive+0x90>
		point[i] = *(buff+i);
 8000e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2a:	4a46      	ldr	r2, [pc, #280]	; (8000f44 <UART_Receive+0x194>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	7819      	ldrb	r1, [r3, #0]
 8000e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e34:	4413      	add	r3, r2
 8000e36:	460a      	mov	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strlen(buff); i++){
 8000e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e40:	4840      	ldr	r0, [pc, #256]	; (8000f44 <UART_Receive+0x194>)
 8000e42:	f7ff f9e5 	bl	8000210 <strlen>
 8000e46:	4602      	mov	r2, r0
 8000e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d8ec      	bhi.n	8000e28 <UART_Receive+0x78>
	}

	char delim[] = " ";
 8000e4e:	2320      	movs	r3, #32
 8000e50:	863b      	strh	r3, [r7, #48]	; 0x30
	uint8_t* dest = (uint8_t*)strtok((char*)point, delim); //get the destination to the break
 8000e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fee4 	bl	8003c28 <strtok>
 8000e60:	6438      	str	r0, [r7, #64]	; 0x40
	char delim2[] = "\r";
 8000e62:	230d      	movs	r3, #13
 8000e64:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t* data = (uint8_t*)strtok(NULL, delim2); //get the data to the end
 8000e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f002 fedb 	bl	8003c28 <strtok>
 8000e72:	63f8      	str	r0, [r7, #60]	; 0x3c

	if(strlen((char*)dest) == 2 && strlen((char*)data) > 0){
 8000e74:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e76:	f7ff f9cb 	bl	8000210 <strlen>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d120      	bne.n	8000ec2 <UART_Receive+0x112>
 8000e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d01c      	beq.n	8000ec2 <UART_Receive+0x112>
		char sent[2] = "OK";
 8000e88:	f644 334f 	movw	r3, #19279	; 0x4b4f
 8000e8c:	853b      	strh	r3, [r7, #40]	; 0x28
		HAL_UART_Transmit ( huart, (uint8_t*)sent, strlen( sent ), 1000 );
 8000e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff f9bc 	bl	8000210 <strlen>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f002 fa9d 	bl	80033e4 <HAL_UART_Transmit>
		tm_send(data, (uint8_t)strtol((char*)dest, NULL, 16));
 8000eaa:	2210      	movs	r2, #16
 8000eac:	2100      	movs	r1, #0
 8000eae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000eb0:	f002 ff8a 	bl	8003dc8 <strtol>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4619      	mov	r1, r3
 8000eba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ebc:	f000 fd00 	bl	80018c0 <tm_send>
	if(strlen((char*)dest) == 2 && strlen((char*)data) > 0){
 8000ec0:	e026      	b.n	8000f10 <UART_Receive+0x160>
	} else {
		HAL_UART_Transmit ( huart, (uint8_t*)point, strlen( buff ), 1000 );
 8000ec2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8000ec4:	481f      	ldr	r0, [pc, #124]	; (8000f44 <UART_Receive+0x194>)
 8000ec6:	f7ff f9a3 	bl	8000210 <strlen>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f002 fa85 	bl	80033e4 <HAL_UART_Transmit>
		char sent[31] = "Format: 00 this is your message";
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <UART_Receive+0x198>)
 8000edc:	f107 0408 	add.w	r4, r7, #8
 8000ee0:	461d      	mov	r5, r3
 8000ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eea:	c407      	stmia	r4!, {r0, r1, r2}
 8000eec:	8023      	strh	r3, [r4, #0]
 8000eee:	3402      	adds	r4, #2
 8000ef0:	0c1b      	lsrs	r3, r3, #16
 8000ef2:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit ( huart, (uint8_t*)sent, strlen( sent ), 1000 );
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff f989 	bl	8000210 <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	f107 0108 	add.w	r1, r7, #8
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f002 fa6a 	bl	80033e4 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit ( huart, (uint8_t*)buff2, strlen( buff2 ), 10 );
 8000f10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f97b 	bl	8000210 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f22:	230a      	movs	r3, #10
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f002 fa5d 	bl	80033e4 <HAL_UART_Transmit>

	memset( buff, 0, 258 ); //clear the data out.
 8000f2a:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <UART_Receive+0x194>)
 8000f32:	f002 fe15 	bl	8003b60 <memset>
 8000f36:	46b5      	mov	sp, r6
}
 8000f38:	bf00      	nop
 8000f3a:	3754      	adds	r7, #84	; 0x54
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f40:	08004670 	.word	0x08004670
 8000f44:	200004a8 	.word	0x200004a8
 8000f48:	08004678 	.word	0x08004678

08000f4c <GPIO_Set_Lights>:

void GPIO_Set_Lights(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	uint16_t pattern = cm_get_state(); //read the state
 8000f52:	f7ff fb91 	bl	8000678 <cm_get_state>
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
	GPIOA->ODR = pattern << 5;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	015a      	lsls	r2, r3, #5
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <GPIO_Set_Lights+0x44>)
 8000f60:	615a      	str	r2, [r3, #20]

	if(pattern == 0x1 && rx_flag != 1){
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d10f      	bne.n	8000f88 <GPIO_Set_Lights+0x3c>
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <GPIO_Set_Lights+0x48>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d00b      	beq.n	8000f88 <GPIO_Set_Lights+0x3c>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <GPIO_Set_Lights+0x4c>)
 8000f72:	f001 fe44 	bl	8002bfe <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <GPIO_Set_Lights+0x4c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
		rc_reset();
 8000f7e:	f000 fa35 	bl	80013ec <rc_reset>
		rx_flag = 1; //only run this once
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <GPIO_Set_Lights+0x48>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
	}
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40020000 	.word	0x40020000
 8000f94:	2000021c 	.word	0x2000021c
 8000f98:	200005ec 	.word	0x200005ec

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <rc_init>:
static int intermed;
static int j;
static uint8_t* store;
static data_struct* rx;

void rc_init(uint8_t* Store, TIM_HandleTypeDef *HTIM, UART_HandleTypeDef *HUART, data_struct* RX){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  htim = HTIM;
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <rc_init+0x34>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	6013      	str	r3, [r2, #0]
  huart = HUART;
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <rc_init+0x38>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  rx = RX;
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <rc_init+0x3c>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6013      	str	r3, [r2, #0]
  store = Store;
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <rc_init+0x40>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6013      	str	r3, [r2, #0]
  rc_reset();
 8000fd2:	f000 fa0b 	bl	80013ec <rc_reset>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000438 	.word	0x20000438
 8000fe4:	20000434 	.word	0x20000434
 8000fe8:	20000454 	.word	0x20000454
 8000fec:	20000450 	.word	0x20000450

08000ff0 <rc_receive>:

int rc_receive(){
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
	int ret = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
	if(cm_get_state() != 0x4){ //not in collision
 8000ffa:	f7ff fb3d 	bl	8000678 <cm_get_state>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b04      	cmp	r3, #4
 8001002:	d053      	beq.n	80010ac <rc_receive+0xbc>
		ack = false;
 8001004:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <rc_receive+0x114>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
		if(bit >= 0){
 800100a:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <rc_receive+0x118>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db72      	blt.n	80010f8 <rc_receive+0x108>
			switch(sp){
 8001012:	4b3e      	ldr	r3, [pc, #248]	; (800110c <rc_receive+0x11c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <rc_receive+0x30>
 800101a:	2b01      	cmp	r3, #1
 800101c:	d009      	beq.n	8001032 <rc_receive+0x42>
 800101e:	e03d      	b.n	800109c <rc_receive+0xac>
			case START:
				midint = ~(intermed);
 8001020:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <rc_receive+0x120>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	43db      	mvns	r3, r3
 8001026:	4a3b      	ldr	r2, [pc, #236]	; (8001114 <rc_receive+0x124>)
 8001028:	6013      	str	r3, [r2, #0]
				sp = MID;
 800102a:	4b38      	ldr	r3, [pc, #224]	; (800110c <rc_receive+0x11c>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
				break;
 8001030:	e034      	b.n	800109c <rc_receive+0xac>
			case MID:
				intermed = ~(midint);
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <rc_receive+0x124>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	43db      	mvns	r3, r3
 8001038:	4a35      	ldr	r2, [pc, #212]	; (8001110 <rc_receive+0x120>)
 800103a:	6013      	str	r3, [r2, #0]
				if(intermed == 1){
 800103c:	4b34      	ldr	r3, [pc, #208]	; (8001110 <rc_receive+0x120>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d110      	bne.n	8001066 <rc_receive+0x76>
					(*store) |= (1<<bit); //set the bit
 8001044:	4b34      	ldr	r3, [pc, #208]	; (8001118 <rc_receive+0x128>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b25a      	sxtb	r2, r3
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <rc_receive+0x118>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	b25b      	sxtb	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b25a      	sxtb	r2, r3
 800105c:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <rc_receive+0x128>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	e011      	b.n	800108a <rc_receive+0x9a>
				} else {
					(*store) &= ~(1<<bit); //clear the bit
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <rc_receive+0x128>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b25a      	sxtb	r2, r3
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <rc_receive+0x118>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2101      	movs	r1, #1
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	b25b      	sxtb	r3, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	b25b      	sxtb	r3, r3
 800107e:	4013      	ands	r3, r2
 8001080:	b25a      	sxtb	r2, r3
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <rc_receive+0x128>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
				}
				bit--;
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <rc_receive+0x118>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <rc_receive+0x118>)
 8001092:	6013      	str	r3, [r2, #0]
				sp = START;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <rc_receive+0x11c>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
				break;
 800109a:	bf00      	nop
			}

			if(bit < 0){
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <rc_receive+0x118>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	da29      	bge.n	80010f8 <rc_receive+0x108>
				ret = rc_store();
 80010a4:	f000 f86e 	bl	8001184 <rc_store>
 80010a8:	61f8      	str	r0, [r7, #28]
 80010aa:	e025      	b.n	80010f8 <rc_receive+0x108>
			}
		}
	} else {
		//restart the transmission or wait until the line is idle
		if(!ack){
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <rc_receive+0x114>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f083 0301 	eor.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d01c      	beq.n	80010f4 <rc_receive+0x104>
			uint8_t ack_mess[27] = "Collision during receive.\r\n";
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <rc_receive+0x12c>)
 80010bc:	463c      	mov	r4, r7
 80010be:	461d      	mov	r5, r3
 80010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c8:	c403      	stmia	r4!, {r0, r1}
 80010ca:	8022      	strh	r2, [r4, #0]
 80010cc:	3402      	adds	r4, #2
 80010ce:	0c13      	lsrs	r3, r2, #16
 80010d0:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit ( huart, ack_mess, strlen( (char*)ack_mess ), 1000 );
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <rc_receive+0x130>)
 80010d4:	681c      	ldr	r4, [r3, #0]
 80010d6:	463b      	mov	r3, r7
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f899 	bl	8000210 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4639      	mov	r1, r7
 80010e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e8:	4620      	mov	r0, r4
 80010ea:	f002 f97b 	bl	80033e4 <HAL_UART_Transmit>
			ack = true;
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <rc_receive+0x114>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
		}
		rc_reset();
 80010f4:	f000 f97a 	bl	80013ec <rc_reset>
	}
	return ret;
 80010f8:	69fb      	ldr	r3, [r7, #28]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bdb0      	pop	{r4, r5, r7, pc}
 8001102:	bf00      	nop
 8001104:	20000444 	.word	0x20000444
 8001108:	20000430 	.word	0x20000430
 800110c:	2000042d 	.word	0x2000042d
 8001110:	20000448 	.word	0x20000448
 8001114:	20000440 	.word	0x20000440
 8001118:	20000450 	.word	0x20000450
 800111c:	08004698 	.word	0x08004698
 8001120:	20000434 	.word	0x20000434

08001124 <rc_timeout>:

int rc_timeout(){ //happens when there is a 1 followed by a 0 or a 0 folowed by a 1
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

	int ret = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
	switch(sp){
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <rc_timeout+0x54>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <rc_timeout+0x18>
 8001136:	2b01      	cmp	r3, #1
 8001138:	d008      	beq.n	800114c <rc_timeout+0x28>
 800113a:	e017      	b.n	800116c <rc_timeout+0x48>
		case START:
			midint = intermed;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <rc_timeout+0x58>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <rc_timeout+0x5c>)
 8001142:	6013      	str	r3, [r2, #0]
			sp = MID;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <rc_timeout+0x54>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
			break;
 800114a:	e00f      	b.n	800116c <rc_timeout+0x48>
		case MID: //only time it should be here is if we are at the end.
			ret = 1;
 800114c:	2301      	movs	r3, #1
 800114e:	607b      	str	r3, [r7, #4]
			intermed = midint;
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <rc_timeout+0x5c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a09      	ldr	r2, [pc, #36]	; (800117c <rc_timeout+0x58>)
 8001156:	6013      	str	r3, [r2, #0]
			sp = START;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <rc_timeout+0x54>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
			if(intermed == 1){ //only if it is the end
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <rc_timeout+0x58>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <rc_timeout+0x46>
				rc_send();
 8001166:	f000 f887 	bl	8001278 <rc_send>
			}
			break;
 800116a:	bf00      	nop
	}
	return ret;
 800116c:	687b      	ldr	r3, [r7, #4]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000042d 	.word	0x2000042d
 800117c:	20000448 	.word	0x20000448
 8001180:	20000440 	.word	0x20000440

08001184 <rc_store>:

int rc_store(){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
	int ret = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
	//store the message
	if(i < 5){
 800118e:	4b34      	ldr	r3, [pc, #208]	; (8001260 <rc_store+0xdc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b04      	cmp	r3, #4
 8001194:	dc0e      	bgt.n	80011b4 <rc_store+0x30>
		*((uint8_t*)rx + i) = *store;
 8001196:	4b33      	ldr	r3, [pc, #204]	; (8001264 <rc_store+0xe0>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b33      	ldr	r3, [pc, #204]	; (8001268 <rc_store+0xe4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4930      	ldr	r1, [pc, #192]	; (8001260 <rc_store+0xdc>)
 80011a0:	6809      	ldr	r1, [r1, #0]
 80011a2:	440b      	add	r3, r1
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	701a      	strb	r2, [r3, #0]
		i++;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <rc_store+0xdc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a2c      	ldr	r2, [pc, #176]	; (8001260 <rc_store+0xdc>)
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e04c      	b.n	800124e <rc_store+0xca>
	}else if(i == 5){
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <rc_store+0xdc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d133      	bne.n	8001224 <rc_store+0xa0>
		if((rx->dest == SOURCE) || (rx->dest == BROADCAST)){
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <rc_store+0xe4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	789b      	ldrb	r3, [r3, #2]
 80011c2:	2b36      	cmp	r3, #54	; 0x36
 80011c4:	d004      	beq.n	80011d0 <rc_store+0x4c>
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <rc_store+0xe4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d11c      	bne.n	800120a <rc_store+0x86>
			rx->data[j] = (*store);
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <rc_store+0xe0>)
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <rc_store+0xe4>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <rc_store+0xe8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	7809      	ldrb	r1, [r1, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	460a      	mov	r2, r1
 80011e2:	715a      	strb	r2, [r3, #5]
			j++;
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <rc_store+0xe8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a20      	ldr	r2, [pc, #128]	; (800126c <rc_store+0xe8>)
 80011ec:	6013      	str	r3, [r2, #0]
			if(j == rx->length){
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <rc_store+0xe4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	78db      	ldrb	r3, [r3, #3]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <rc_store+0xe8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d127      	bne.n	800124e <rc_store+0xca>
				i++;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <rc_store+0xdc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a16      	ldr	r2, [pc, #88]	; (8001260 <rc_store+0xdc>)
 8001206:	6013      	str	r3, [r2, #0]
			if(j == rx->length){
 8001208:	e021      	b.n	800124e <rc_store+0xca>
			}
		} else {
			//transmission is done. this is not sent to us
			HAL_TIM_Base_Stop_IT(htim);
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <rc_store+0xec>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fcf5 	bl	8002bfe <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <rc_store+0xec>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
			rc_reset();
 800121e:	f000 f8e5 	bl	80013ec <rc_reset>
 8001222:	e014      	b.n	800124e <rc_store+0xca>
		}
	} else if(i == 6){
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <rc_store+0xdc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b06      	cmp	r3, #6
 800122a:	d10c      	bne.n	8001246 <rc_store+0xc2>
		rx->crc = *store;
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <rc_store+0xe0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <rc_store+0xe4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		i++;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <rc_store+0xdc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <rc_store+0xdc>)
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e003      	b.n	800124e <rc_store+0xca>
	} else { //max that the total message can be
		rc_send();
 8001246:	f000 f817 	bl	8001278 <rc_send>
		ret = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
	}
	bit = 7;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <rc_store+0xf0>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
	return ret;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000043c 	.word	0x2000043c
 8001264:	20000450 	.word	0x20000450
 8001268:	20000454 	.word	0x20000454
 800126c:	2000044c 	.word	0x2000044c
 8001270:	20000438 	.word	0x20000438
 8001274:	20000430 	.word	0x20000430

08001278 <rc_send>:

void rc_send(){
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	b091      	sub	sp, #68	; 0x44
 800127c:	af06      	add	r7, sp, #24
	HAL_TIM_Base_Stop_IT(htim);
 800127e:	4b55      	ldr	r3, [pc, #340]	; (80013d4 <rc_send+0x15c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fcbb 	bl	8002bfe <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(htim, 0);
 8001288:	4b52      	ldr	r3, [pc, #328]	; (80013d4 <rc_send+0x15c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
	char* test = store;
 8001292:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <rc_send+0x160>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	623b      	str	r3, [r7, #32]
	bool crc_correct = false;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(rx->crcf == 0x1){
 800129e:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <rc_send+0x164>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	791b      	ldrb	r3, [r3, #4]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d115      	bne.n	80012d4 <rc_send+0x5c>
		uint8_t crc = gen_crc(rx->data, rx->length, rx->crc);
 80012a8:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <rc_send+0x164>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	1d58      	adds	r0, r3, #5
 80012ae:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <rc_send+0x164>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	78d9      	ldrb	r1, [r3, #3]
 80012b4:	4b49      	ldr	r3, [pc, #292]	; (80013dc <rc_send+0x164>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80012bc:	461a      	mov	r2, r3
 80012be:	f7ff f9fb 	bl	80006b8 <gen_crc>
 80012c2:	4603      	mov	r3, r0
 80012c4:	77fb      	strb	r3, [r7, #31]
		if(crc == 0x00){
 80012c6:	7ffb      	ldrb	r3, [r7, #31]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d106      	bne.n	80012da <rc_send+0x62>
			crc_correct = true;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012d2:	e002      	b.n	80012da <rc_send+0x62>
		}
	} else {
		crc_correct = true;
 80012d4:	2301      	movs	r3, #1
 80012d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if(crc_correct){
 80012da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d05e      	beq.n	80013a0 <rc_send+0x128>
 80012e2:	466b      	mov	r3, sp
 80012e4:	461e      	mov	r6, r3
		char sent[56 + rx->length];
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <rc_send+0x164>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	78db      	ldrb	r3, [r3, #3]
 80012ec:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80012f0:	1e43      	subs	r3, r0, #1
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	4603      	mov	r3, r0
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	f04f 0400 	mov.w	r4, #0
 8001304:	00d4      	lsls	r4, r2, #3
 8001306:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800130a:	00cb      	lsls	r3, r1, #3
 800130c:	4603      	mov	r3, r0
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	f04f 0400 	mov.w	r4, #0
 800131c:	00d4      	lsls	r4, r2, #3
 800131e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001322:	00cb      	lsls	r3, r1, #3
 8001324:	4603      	mov	r3, r0
 8001326:	3307      	adds	r3, #7
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	ebad 0d03 	sub.w	sp, sp, r3
 8001330:	ab06      	add	r3, sp, #24
 8001332:	3300      	adds	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
		sprintf(sent, "From: %x\r\nTo:%x\r\n%s\r\nCRC: %x\r\nLength: %x\r\nHead: %x\r\nCRCF: %x\r\n",rx->src, rx->dest, rx->data,rx->crc, rx->length, rx->pre, rx->crcf);
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <rc_send+0x164>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	785b      	ldrb	r3, [r3, #1]
 800133e:	469c      	mov	ip, r3
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <rc_send+0x164>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	789b      	ldrb	r3, [r3, #2]
 8001346:	469e      	mov	lr, r3
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <rc_send+0x164>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3305      	adds	r3, #5
 800134e:	4a23      	ldr	r2, [pc, #140]	; (80013dc <rc_send+0x164>)
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	f892 2104 	ldrb.w	r2, [r2, #260]	; 0x104
 8001356:	4611      	mov	r1, r2
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <rc_send+0x164>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	78d2      	ldrb	r2, [r2, #3]
 800135e:	4614      	mov	r4, r2
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <rc_send+0x164>)
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	4615      	mov	r5, r2
 8001368:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <rc_send+0x164>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	7912      	ldrb	r2, [r2, #4]
 800136e:	9204      	str	r2, [sp, #16]
 8001370:	9503      	str	r5, [sp, #12]
 8001372:	9402      	str	r4, [sp, #8]
 8001374:	9101      	str	r1, [sp, #4]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4673      	mov	r3, lr
 800137a:	4662      	mov	r2, ip
 800137c:	4918      	ldr	r1, [pc, #96]	; (80013e0 <rc_send+0x168>)
 800137e:	f002 fc2b 	bl	8003bd8 <siprintf>
		HAL_UART_Transmit ( huart, (uint8_t*)sent, 56 + rx->length, 0xFFFF );
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <rc_send+0x16c>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	6979      	ldr	r1, [r7, #20]
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <rc_send+0x164>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	78db      	ldrb	r3, [r3, #3]
 800138e:	b29b      	uxth	r3, r3
 8001390:	3338      	adds	r3, #56	; 0x38
 8001392:	b29a      	uxth	r2, r3
 8001394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001398:	f002 f824 	bl	80033e4 <HAL_UART_Transmit>
 800139c:	46b5      	mov	sp, r6
 800139e:	e012      	b.n	80013c6 <rc_send+0x14e>
	} else {
		uint8_t ack_mess[14] = "CRC Error!!!\r\n";
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <rc_send+0x170>)
 80013a2:	1d3c      	adds	r4, r7, #4
 80013a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a6:	c407      	stmia	r4!, {r0, r1, r2}
 80013a8:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit ( huart, ack_mess, strlen( (char*)ack_mess ), 1000 );
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <rc_send+0x16c>)
 80013ac:	681c      	ldr	r4, [r3, #0]
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ff2d 	bl	8000210 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	1d39      	adds	r1, r7, #4
 80013bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c0:	4620      	mov	r0, r4
 80013c2:	f002 f80f 	bl	80033e4 <HAL_UART_Transmit>
	}


	rc_reset();
 80013c6:	f000 f811 	bl	80013ec <rc_reset>
}
 80013ca:	bf00      	nop
 80013cc:	372c      	adds	r7, #44	; 0x2c
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000438 	.word	0x20000438
 80013d8:	20000450 	.word	0x20000450
 80013dc:	20000454 	.word	0x20000454
 80013e0:	080046b4 	.word	0x080046b4
 80013e4:	20000434 	.word	0x20000434
 80013e8:	080046f4 	.word	0x080046f4

080013ec <rc_reset>:

void rc_reset(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	rx->pre = 0;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <rc_reset+0x74>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
	rx->src = 0;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <rc_reset+0x74>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	705a      	strb	r2, [r3, #1]
	rx->dest = 0;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <rc_reset+0x74>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	709a      	strb	r2, [r3, #2]
	rx->length = 0;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <rc_reset+0x74>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	70da      	strb	r2, [r3, #3]
	rx->crcf = 0;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <rc_reset+0x74>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	711a      	strb	r2, [r3, #4]
	memset(rx->data, 0, 255);
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <rc_reset+0x74>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3305      	adds	r3, #5
 800141e:	22ff      	movs	r2, #255	; 0xff
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fb9c 	bl	8003b60 <memset>
	rx->crc = 0;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <rc_reset+0x74>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	i = 0;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <rc_reset+0x78>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
	bit = 7; //the first thing the receiver sees is the second bit. the first bit should always be 0
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <rc_reset+0x7c>)
 800143a:	2207      	movs	r2, #7
 800143c:	601a      	str	r2, [r3, #0]
	sp = reset;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <rc_reset+0x80>)
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <rc_reset+0x84>)
 8001444:	701a      	strb	r2, [r3, #0]
	j = 0;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <rc_reset+0x88>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
	midint = reset_int;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <rc_reset+0x8c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <rc_reset+0x90>)
 8001452:	6013      	str	r3, [r2, #0]
	intermed = reset_int;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <rc_reset+0x8c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a09      	ldr	r2, [pc, #36]	; (8001480 <rc_reset+0x94>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000454 	.word	0x20000454
 8001464:	2000043c 	.word	0x2000043c
 8001468:	20000430 	.word	0x20000430
 800146c:	20000000 	.word	0x20000000
 8001470:	2000042d 	.word	0x2000042d
 8001474:	2000044c 	.word	0x2000044c
 8001478:	20000004 	.word	0x20000004
 800147c:	20000440 	.word	0x20000440
 8001480:	20000448 	.word	0x20000448

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <HAL_MspInit+0x4c>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e4:	d116      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_TIM_Base_MspInit+0xb8>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_TIM_Base_MspInit+0xb8>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_TIM_Base_MspInit+0xb8>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	201c      	movs	r0, #28
 8001508:	f000 fc6d 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800150c:	201c      	movs	r0, #28
 800150e:	f000 fc86 	bl	8001e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001512:	e036      	b.n	8001582 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1d      	ldr	r2, [pc, #116]	; (8001590 <HAL_TIM_Base_MspInit+0xbc>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d116      	bne.n	800154c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_TIM_Base_MspInit+0xb8>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a19      	ldr	r2, [pc, #100]	; (800158c <HAL_TIM_Base_MspInit+0xb8>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_TIM_Base_MspInit+0xb8>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	201d      	movs	r0, #29
 8001540:	f000 fc51 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001544:	201d      	movs	r0, #29
 8001546:	f000 fc6a 	bl	8001e1e <HAL_NVIC_EnableIRQ>
}
 800154a:	e01a      	b.n	8001582 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a10      	ldr	r2, [pc, #64]	; (8001594 <HAL_TIM_Base_MspInit+0xc0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d115      	bne.n	8001582 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_TIM_Base_MspInit+0xb8>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <HAL_TIM_Base_MspInit+0xb8>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_TIM_Base_MspInit+0xb8>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	201e      	movs	r0, #30
 8001578:	f000 fc35 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800157c:	201e      	movs	r0, #30
 800157e:	f000 fc4e 	bl	8001e1e <HAL_NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40000400 	.word	0x40000400
 8001594:	40000800 	.word	0x40000800

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_UART_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12b      	bne.n	8001612 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015f2:	230c      	movs	r3, #12
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001602:	2307      	movs	r3, #7
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_UART_MspInit+0x8c>)
 800160e:	f000 fc21 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>

0800164e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167c:	f000 fa96 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001688:	2004      	movs	r0, #4
 800168a:	f000 fd8f 	bl	80021ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <TIM2_IRQHandler+0x10>)
 800169a:	f001 fadb 	bl	8002c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200005ec 	.word	0x200005ec

080016a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <TIM3_IRQHandler+0x10>)
 80016ae:	f001 fad1 	bl	8002c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200005ac 	.word	0x200005ac

080016bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <TIM4_IRQHandler+0x10>)
 80016c2:	f001 fac7 	bl	8002c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000468 	.word	0x20000468

080016d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x50>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x16>
		heap_end = &end;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <_sbrk+0x50>)
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <_sbrk+0x54>)
 80016e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <_sbrk+0x50>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <_sbrk+0x50>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	466a      	mov	r2, sp
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d907      	bls.n	800170a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016fa:	f002 fa07 	bl	8003b0c <__errno>
 80016fe:	4602      	mov	r2, r0
 8001700:	230c      	movs	r3, #12
 8001702:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	e006      	b.n	8001718 <_sbrk+0x48>
	}

	heap_end += incr;
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <_sbrk+0x50>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a03      	ldr	r2, [pc, #12]	; (8001720 <_sbrk+0x50>)
 8001714:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000458 	.word	0x20000458
 8001724:	200006a0 	.word	0x200006a0

08001728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <SystemInit+0x60>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a15      	ldr	r2, [pc, #84]	; (8001788 <SystemInit+0x60>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <SystemInit+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a12      	ldr	r2, [pc, #72]	; (800178c <SystemInit+0x64>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <SystemInit+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <SystemInit+0x64>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <SystemInit+0x64>)
 8001754:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <SystemInit+0x64>)
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <SystemInit+0x68>)
 8001762:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <SystemInit+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a08      	ldr	r2, [pc, #32]	; (800178c <SystemInit+0x64>)
 800176a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SystemInit+0x60>)
 8001778:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800177c:	609a      	str	r2, [r3, #8]
#endif
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00
 800178c:	40023800 	.word	0x40023800
 8001790:	24003010 	.word	0x24003010

08001794 <tm_init>:
int data;
int wait;
data_struct* tx;
int i;

void tm_init(GPIO_TypeDef* loc, int pin, TIM_HandleTypeDef *HTIM, data_struct* rx){
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
	tx = rx;
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <tm_init+0x34>)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6013      	str	r3, [r2, #0]
	location = loc;
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <tm_init+0x38>)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6013      	str	r3, [r2, #0]
	Pin = pin;
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <tm_init+0x3c>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	6013      	str	r3, [r2, #0]
	htim = HTIM;
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <tm_init+0x40>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
	tm_reset();
 80017ba:	f000 f943 	bl	8001a44 <tm_reset>
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000684 	.word	0x20000684
 80017cc:	2000066c 	.word	0x2000066c
 80017d0:	20000674 	.word	0x20000674
 80017d4:	20000694 	.word	0x20000694

080017d8 <tm_next_byte>:

int tm_next_byte(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
	int ret;
	if(where < 5){
 80017de:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <tm_next_byte+0xcc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	dc0f      	bgt.n	8001806 <tm_next_byte+0x2e>
		to_send = *((uint8_t*)tx + where);
 80017e6:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <tm_next_byte+0xd0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a2e      	ldr	r2, [pc, #184]	; (80018a4 <tm_next_byte+0xcc>)
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <tm_next_byte+0xd4>)
 80017f4:	701a      	strb	r2, [r3, #0]
		where++;
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <tm_next_byte+0xcc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a29      	ldr	r2, [pc, #164]	; (80018a4 <tm_next_byte+0xcc>)
 80017fe:	6013      	str	r3, [r2, #0]
		ret = 1;
 8001800:	2301      	movs	r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	e046      	b.n	8001894 <tm_next_byte+0xbc>
	} else if(where == 5){
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <tm_next_byte+0xcc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d11a      	bne.n	8001844 <tm_next_byte+0x6c>
		to_send = tx->data[i];
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <tm_next_byte+0xd0>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <tm_next_byte+0xd8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	795a      	ldrb	r2, [r3, #5]
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <tm_next_byte+0xd4>)
 800181c:	701a      	strb	r2, [r3, #0]
		i++;
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <tm_next_byte+0xd8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <tm_next_byte+0xd8>)
 8001826:	6013      	str	r3, [r2, #0]
		if(i == tx->length){
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <tm_next_byte+0xd0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	78db      	ldrb	r3, [r3, #3]
 800182e:	461a      	mov	r2, r3
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <tm_next_byte+0xd8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d12d      	bne.n	8001894 <tm_next_byte+0xbc>
			where++;
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <tm_next_byte+0xcc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <tm_next_byte+0xcc>)
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e027      	b.n	8001894 <tm_next_byte+0xbc>
		}
	} else if(where == 6){
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <tm_next_byte+0xcc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b06      	cmp	r3, #6
 800184a:	d10b      	bne.n	8001864 <tm_next_byte+0x8c>
		to_send = tx->crc;
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <tm_next_byte+0xd0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <tm_next_byte+0xd4>)
 8001856:	701a      	strb	r2, [r3, #0]
		where++;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <tm_next_byte+0xcc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <tm_next_byte+0xcc>)
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e017      	b.n	8001894 <tm_next_byte+0xbc>
	}else {
		if(wait != 0){
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <tm_next_byte+0xdc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <tm_next_byte+0xa0>
			wait--;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <tm_next_byte+0xdc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3b01      	subs	r3, #1
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <tm_next_byte+0xdc>)
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00d      	b.n	8001894 <tm_next_byte+0xbc>
		} else {
			//stop the timer here
			HAL_TIM_Base_Stop_IT(htim);
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <tm_next_byte+0xe0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f001 f9be 	bl	8002bfe <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <tm_next_byte+0xe0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
			tm_reset();
 800188c:	f000 f8da 	bl	8001a44 <tm_reset>
			ret = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
		}
	}
	bit = 7;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <tm_next_byte+0xe4>)
 8001896:	2207      	movs	r2, #7
 8001898:	601a      	str	r2, [r3, #0]
	return ret;
 800189a:	687b      	ldr	r3, [r7, #4]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000068c 	.word	0x2000068c
 80018a8:	20000684 	.word	0x20000684
 80018ac:	20000678 	.word	0x20000678
 80018b0:	2000067c 	.word	0x2000067c
 80018b4:	20000680 	.word	0x20000680
 80018b8:	20000694 	.word	0x20000694
 80018bc:	20000670 	.word	0x20000670

080018c0 <tm_send>:


void tm_send(uint8_t* data, uint8_t dest){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
	sp = START;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <tm_send+0x78>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]

	tx->src = SOURCE;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <tm_send+0x7c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2236      	movs	r2, #54	; 0x36
 80018d8:	705a      	strb	r2, [r3, #1]
	tx->pre = SOH;
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <tm_send+0x7c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2255      	movs	r2, #85	; 0x55
 80018e0:	701a      	strb	r2, [r3, #0]
	tx->dest = dest;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <tm_send+0x7c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	709a      	strb	r2, [r3, #2]
	tx->length = strlen((char*)data);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7fe fc90 	bl	8000210 <strlen>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <tm_send+0x7c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	70da      	strb	r2, [r3, #3]
	strcpy((char*)tx->data, (char*)data);
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <tm_send+0x7c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3305      	adds	r3, #5
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	f002 f988 	bl	8003c18 <strcpy>

	tx->crcf = CRC_NO;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <tm_send+0x7c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	711a      	strb	r2, [r3, #4]
	tx->crc = CRC_NOT_CHECK;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <tm_send+0x7c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	22aa      	movs	r2, #170	; 0xaa
 8001916:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	//TODO: set the CRC flag an calculate CRC
	//tx->crcf = CRC_YES
	//tx->crc = gencrc(data,tx->length, 0x00);

	where = 0;
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <tm_send+0x80>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

    //Message
	tm_next_byte();
 8001920:	f7ff ff5a 	bl	80017d8 <tm_next_byte>

	//Start timer here.
	HAL_TIM_Base_Start_IT(htim);
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <tm_send+0x84>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f001 f944 	bl	8002bb6 <HAL_TIM_Base_Start_IT>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000690 	.word	0x20000690
 800193c:	20000684 	.word	0x20000684
 8001940:	2000068c 	.word	0x2000068c
 8001944:	20000694 	.word	0x20000694

08001948 <tm_calc_next>:

void tm_calc_next(){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
	if(cm_get_state() != 0x4){ //not in collision
 800194e:	f7fe fe93 	bl	8000678 <cm_get_state>
 8001952:	4603      	mov	r3, r0
 8001954:	2b04      	cmp	r3, #4
 8001956:	d03b      	beq.n	80019d0 <tm_calc_next+0x88>

		if(bit >= 0){
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <tm_calc_next+0xbc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db30      	blt.n	80019c2 <tm_calc_next+0x7a>
			uint8_t test = to_send;
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <tm_calc_next+0xc0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	71fb      	strb	r3, [r7, #7]
			int current = ((test>>bit) & 0x1);
 8001966:	79fa      	ldrb	r2, [r7, #7]
 8001968:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <tm_calc_next+0xbc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fa42 f303 	asr.w	r3, r2, r3
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	603b      	str	r3, [r7, #0]
			int sent = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
			switch(sp){
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <tm_calc_next+0xc4>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <tm_calc_next+0x40>
 8001982:	2b01      	cmp	r3, #1
 8001984:	d00f      	beq.n	80019a6 <tm_calc_next+0x5e>
 8001986:	e019      	b.n	80019bc <tm_calc_next+0x74>
			case START:
				sent = !current;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	60fb      	str	r3, [r7, #12]
				sent = (sent & 0x1);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
				sp = MID;
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <tm_calc_next+0xc4>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
				break;
 80019a4:	e00a      	b.n	80019bc <tm_calc_next+0x74>
			case MID:
				sent = current;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
				sp = START;
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <tm_calc_next+0xc4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
				bit--;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <tm_calc_next+0xbc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <tm_calc_next+0xbc>)
 80019b8:	6013      	str	r3, [r2, #0]
				break;
 80019ba:	bf00      	nop
			}
			data = sent;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <tm_calc_next+0xc8>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6013      	str	r3, [r2, #0]
		}

		if(bit < 0){
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <tm_calc_next+0xbc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da17      	bge.n	80019fa <tm_calc_next+0xb2>
			tm_next_byte();
 80019ca:	f7ff ff05 	bl	80017d8 <tm_next_byte>
		//restart the transmission or wait until the line is idle
		tm_reset();
		int r = rand() % 1000; //max value of 1000. this sets our time to 1 ms with a max of 1 second
		HAL_Delay(r);
	}
}
 80019ce:	e014      	b.n	80019fa <tm_calc_next+0xb2>
		tm_reset();
 80019d0:	f000 f838 	bl	8001a44 <tm_reset>
		int r = rand() % 1000; //max value of 1000. this sets our time to 1 ms with a max of 1 second
 80019d4:	f002 f8cc 	bl	8003b70 <rand>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <tm_calc_next+0xcc>)
 80019dc:	fb82 1203 	smull	r1, r2, r2, r3
 80019e0:	1191      	asrs	r1, r2, #6
 80019e2:	17da      	asrs	r2, r3, #31
 80019e4:	1a8a      	subs	r2, r1, r2
 80019e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ea:	fb01 f202 	mul.w	r2, r1, r2
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	60bb      	str	r3, [r7, #8]
		HAL_Delay(r);
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 f8f9 	bl	8001bec <HAL_Delay>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000670 	.word	0x20000670
 8001a08:	20000678 	.word	0x20000678
 8001a0c:	20000690 	.word	0x20000690
 8001a10:	20000688 	.word	0x20000688
 8001a14:	10624dd3 	.word	0x10624dd3

08001a18 <tm_change_pin>:



void tm_change_pin(){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(location,Pin,data);
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <tm_change_pin+0x20>)
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <tm_change_pin+0x24>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	b299      	uxth	r1, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <tm_change_pin+0x28>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f000 fba3 	bl	8002178 <HAL_GPIO_WritePin>
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000066c 	.word	0x2000066c
 8001a3c:	20000674 	.word	0x20000674
 8001a40:	20000688 	.word	0x20000688

08001a44 <tm_reset>:

void tm_reset(){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(location,Pin,1); //idle high
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <tm_reset+0x4c>)
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <tm_reset+0x50>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2201      	movs	r2, #1
 8001a54:	4619      	mov	r1, r3
 8001a56:	f000 fb8f 	bl	8002178 <HAL_GPIO_WritePin>
	where = 0;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <tm_reset+0x54>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
	wait = 2;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <tm_reset+0x58>)
 8001a62:	2202      	movs	r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
	bit = 7;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <tm_reset+0x5c>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
	to_send = *(tx->data + where);
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <tm_reset+0x60>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3305      	adds	r3, #5
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <tm_reset+0x54>)
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <tm_reset+0x64>)
 8001a7c:	701a      	strb	r2, [r3, #0]
	data = 1;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <tm_reset+0x68>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
	i = 0;
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <tm_reset+0x6c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000066c 	.word	0x2000066c
 8001a94:	20000674 	.word	0x20000674
 8001a98:	2000068c 	.word	0x2000068c
 8001a9c:	20000680 	.word	0x20000680
 8001aa0:	20000670 	.word	0x20000670
 8001aa4:	20000684 	.word	0x20000684
 8001aa8:	20000678 	.word	0x20000678
 8001aac:	20000688 	.word	0x20000688
 8001ab0:	2000067c 	.word	0x2000067c

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ab8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aba:	e003      	b.n	8001ac4 <LoopCopyDataInit>

08001abc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001abe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ac0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ac2:	3104      	adds	r1, #4

08001ac4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ac8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001acc:	d3f6      	bcc.n	8001abc <CopyDataInit>
  ldr  r2, =_sbss
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ad0:	e002      	b.n	8001ad8 <LoopFillZerobss>

08001ad2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ad2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ad4:	f842 3b04 	str.w	r3, [r2], #4

08001ad8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ada:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001adc:	d3f9      	bcc.n	8001ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ade:	f7ff fe23 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f002 f819 	bl	8003b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7fe fe29 	bl	800073c <main>
  bx  lr    
 8001aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001af0:	0800486c 	.word	0x0800486c
  ldr  r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001af8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001afc:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001b00:	200006a0 	.word	0x200006a0

08001b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_Init+0x40>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_Init+0x40>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x40>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f94d 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 f808 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fca2 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x54>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x58>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f965 	bl	8001e3a <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00e      	b.n	8001b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d80a      	bhi.n	8001b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f000 f92d 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_InitTick+0x5c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000010 	.word	0x20000010
 8001ba8:	2000000c 	.word	0x2000000c

08001bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x20>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000010 	.word	0x20000010
 8001bd0:	20000698 	.word	0x20000698

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_GetTick+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000698 	.word	0x20000698

08001bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff ffee 	bl	8001bd4 <HAL_GetTick>
 8001bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d005      	beq.n	8001c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_Delay+0x40>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c12:	bf00      	nop
 8001c14:	f7ff ffde 	bl	8001bd4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8f7      	bhi.n	8001c14 <HAL_Delay+0x28>
  {
  }
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000010 	.word	0x20000010

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff29 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff3e 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff31 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffa2 	bl	8001d8c <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	e165      	b.n	800213c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	f040 8154 	bne.w	8002136 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x4a>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b12      	cmp	r3, #18
 8001e9c:	d123      	bne.n	8001ee6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	08da      	lsrs	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3208      	adds	r2, #8
 8001ee0:	69b9      	ldr	r1, [r7, #24]
 8001ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0203 	and.w	r2, r3, #3
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d00b      	beq.n	8001f3a <HAL_GPIO_Init+0xe6>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d007      	beq.n	8001f3a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f2e:	2b11      	cmp	r3, #17
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	d130      	bne.n	8001f9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f70:	2201      	movs	r2, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 0201 	and.w	r2, r3, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80ae 	beq.w	8002136 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b5c      	ldr	r3, [pc, #368]	; (8002150 <HAL_GPIO_Init+0x2fc>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a5b      	ldr	r2, [pc, #364]	; (8002150 <HAL_GPIO_Init+0x2fc>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b59      	ldr	r3, [pc, #356]	; (8002150 <HAL_GPIO_Init+0x2fc>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff6:	4a57      	ldr	r2, [pc, #348]	; (8002154 <HAL_GPIO_Init+0x300>)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4e      	ldr	r2, [pc, #312]	; (8002158 <HAL_GPIO_Init+0x304>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d025      	beq.n	800206e <HAL_GPIO_Init+0x21a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4d      	ldr	r2, [pc, #308]	; (800215c <HAL_GPIO_Init+0x308>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <HAL_GPIO_Init+0x216>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <HAL_GPIO_Init+0x30c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d019      	beq.n	8002066 <HAL_GPIO_Init+0x212>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <HAL_GPIO_Init+0x310>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4a      	ldr	r2, [pc, #296]	; (8002168 <HAL_GPIO_Init+0x314>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00d      	beq.n	800205e <HAL_GPIO_Init+0x20a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a49      	ldr	r2, [pc, #292]	; (800216c <HAL_GPIO_Init+0x318>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x206>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_GPIO_Init+0x31c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_GPIO_Init+0x202>
 8002052:	2306      	movs	r3, #6
 8002054:	e00c      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 8002056:	2307      	movs	r3, #7
 8002058:	e00a      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800205a:	2305      	movs	r3, #5
 800205c:	e008      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800205e:	2304      	movs	r3, #4
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 8002062:	2303      	movs	r3, #3
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800206e:	2300      	movs	r3, #0
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002080:	4934      	ldr	r1, [pc, #208]	; (8002154 <HAL_GPIO_Init+0x300>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208e:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_GPIO_Init+0x320>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b2:	4a30      	ldr	r2, [pc, #192]	; (8002174 <HAL_GPIO_Init+0x320>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020b8:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <HAL_GPIO_Init+0x320>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_GPIO_Init+0x320>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_GPIO_Init+0x320>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002106:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_GPIO_Init+0x320>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_GPIO_Init+0x320>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002130:	4a10      	ldr	r2, [pc, #64]	; (8002174 <HAL_GPIO_Init+0x320>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	f67f ae96 	bls.w	8001e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002144:	bf00      	nop
 8002146:	3724      	adds	r7, #36	; 0x24
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40023800 	.word	0x40023800
 8002154:	40013800 	.word	0x40013800
 8002158:	40020000 	.word	0x40020000
 800215c:	40020400 	.word	0x40020400
 8002160:	40020800 	.word	0x40020800
 8002164:	40020c00 	.word	0x40020c00
 8002168:	40021000 	.word	0x40021000
 800216c:	40021400 	.word	0x40021400
 8002170:	40021800 	.word	0x40021800
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d006      	beq.n	80021d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fd74 	bl	8000cb8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0ca      	b.n	8002386 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f0:	4b67      	ldr	r3, [pc, #412]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d90c      	bls.n	8002218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b64      	ldr	r3, [pc, #400]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b62      	ldr	r3, [pc, #392]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0b6      	b.n	8002386 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002230:	4b58      	ldr	r3, [pc, #352]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a57      	ldr	r2, [pc, #348]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002248:	4b52      	ldr	r3, [pc, #328]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a51      	ldr	r2, [pc, #324]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 800224e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	494c      	ldr	r1, [pc, #304]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d044      	beq.n	80022fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d119      	bne.n	80022ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e07d      	b.n	8002386 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d003      	beq.n	800229a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002296:	2b03      	cmp	r3, #3
 8002298:	d107      	bne.n	80022aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229a:	4b3e      	ldr	r3, [pc, #248]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e06d      	b.n	8002386 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022aa:	4b3a      	ldr	r3, [pc, #232]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e065      	b.n	8002386 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ba:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f023 0203 	bic.w	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4933      	ldr	r1, [pc, #204]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022cc:	f7ff fc82 	bl	8001bd4 <HAL_GetTick>
 80022d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d4:	f7ff fc7e 	bl	8001bd4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e04d      	b.n	8002386 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 020c 	and.w	r2, r3, #12
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d1eb      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022fc:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d20c      	bcs.n	8002324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e030      	b.n	8002386 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4915      	ldr	r1, [pc, #84]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	490d      	ldr	r1, [pc, #52]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002362:	f000 f851 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 8002366:	4601      	mov	r1, r0
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	4a09      	ldr	r2, [pc, #36]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	5cd3      	ldrb	r3, [r2, r3]
 8002376:	fa21 f303 	lsr.w	r3, r1, r3
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff fbe4 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00
 8002394:	40023800 	.word	0x40023800
 8002398:	08004704 	.word	0x08004704
 800239c:	20000008 	.word	0x20000008

080023a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000008 	.word	0x20000008

080023b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023bc:	f7ff fff0 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023c0:	4601      	mov	r1, r0
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0a9b      	lsrs	r3, r3, #10
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4a03      	ldr	r2, [pc, #12]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	08004714 	.word	0x08004714

080023e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023e4:	f7ff ffdc 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023e8:	4601      	mov	r1, r0
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0b5b      	lsrs	r3, r3, #13
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4a03      	ldr	r2, [pc, #12]	; (8002404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	08004714 	.word	0x08004714

08002408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002422:	4b9f      	ldr	r3, [pc, #636]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b0c      	cmp	r3, #12
 800242c:	f200 8130 	bhi.w	8002690 <HAL_RCC_GetSysClockFreq+0x288>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <HAL_RCC_GetSysClockFreq+0x30>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	0800246d 	.word	0x0800246d
 800243c:	08002691 	.word	0x08002691
 8002440:	08002691 	.word	0x08002691
 8002444:	08002691 	.word	0x08002691
 8002448:	08002473 	.word	0x08002473
 800244c:	08002691 	.word	0x08002691
 8002450:	08002691 	.word	0x08002691
 8002454:	08002691 	.word	0x08002691
 8002458:	08002479 	.word	0x08002479
 800245c:	08002691 	.word	0x08002691
 8002460:	08002691 	.word	0x08002691
 8002464:	08002691 	.word	0x08002691
 8002468:	08002587 	.word	0x08002587
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b8d      	ldr	r3, [pc, #564]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x29c>)
 800246e:	613b      	str	r3, [r7, #16]
       break;
 8002470:	e111      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002472:	4b8d      	ldr	r3, [pc, #564]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002474:	613b      	str	r3, [r7, #16]
      break;
 8002476:	e10e      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002478:	4b89      	ldr	r3, [pc, #548]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002480:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002482:	4b87      	ldr	r3, [pc, #540]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d023      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248e:	4b84      	ldr	r3, [pc, #528]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	099b      	lsrs	r3, r3, #6
 8002494:	f04f 0400 	mov.w	r4, #0
 8002498:	f240 11ff 	movw	r1, #511	; 0x1ff
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	ea03 0501 	and.w	r5, r3, r1
 80024a4:	ea04 0602 	and.w	r6, r4, r2
 80024a8:	4a7f      	ldr	r2, [pc, #508]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80024aa:	fb02 f106 	mul.w	r1, r2, r6
 80024ae:	2200      	movs	r2, #0
 80024b0:	fb02 f205 	mul.w	r2, r2, r5
 80024b4:	440a      	add	r2, r1
 80024b6:	497c      	ldr	r1, [pc, #496]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80024b8:	fba5 0101 	umull	r0, r1, r5, r1
 80024bc:	1853      	adds	r3, r2, r1
 80024be:	4619      	mov	r1, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f04f 0400 	mov.w	r4, #0
 80024c6:	461a      	mov	r2, r3
 80024c8:	4623      	mov	r3, r4
 80024ca:	f7fd fef9 	bl	80002c0 <__aeabi_uldivmod>
 80024ce:	4603      	mov	r3, r0
 80024d0:	460c      	mov	r4, r1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e049      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d6:	4b72      	ldr	r3, [pc, #456]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	f04f 0400 	mov.w	r4, #0
 80024e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	ea03 0501 	and.w	r5, r3, r1
 80024ec:	ea04 0602 	and.w	r6, r4, r2
 80024f0:	4629      	mov	r1, r5
 80024f2:	4632      	mov	r2, r6
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	f04f 0400 	mov.w	r4, #0
 80024fc:	0154      	lsls	r4, r2, #5
 80024fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002502:	014b      	lsls	r3, r1, #5
 8002504:	4619      	mov	r1, r3
 8002506:	4622      	mov	r2, r4
 8002508:	1b49      	subs	r1, r1, r5
 800250a:	eb62 0206 	sbc.w	r2, r2, r6
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	f04f 0400 	mov.w	r4, #0
 8002516:	0194      	lsls	r4, r2, #6
 8002518:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800251c:	018b      	lsls	r3, r1, #6
 800251e:	1a5b      	subs	r3, r3, r1
 8002520:	eb64 0402 	sbc.w	r4, r4, r2
 8002524:	f04f 0100 	mov.w	r1, #0
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	00e2      	lsls	r2, r4, #3
 800252e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002532:	00d9      	lsls	r1, r3, #3
 8002534:	460b      	mov	r3, r1
 8002536:	4614      	mov	r4, r2
 8002538:	195b      	adds	r3, r3, r5
 800253a:	eb44 0406 	adc.w	r4, r4, r6
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	02a2      	lsls	r2, r4, #10
 8002548:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800254c:	0299      	lsls	r1, r3, #10
 800254e:	460b      	mov	r3, r1
 8002550:	4614      	mov	r4, r2
 8002552:	4618      	mov	r0, r3
 8002554:	4621      	mov	r1, r4
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f04f 0400 	mov.w	r4, #0
 800255c:	461a      	mov	r2, r3
 800255e:	4623      	mov	r3, r4
 8002560:	f7fd feae 	bl	80002c0 <__aeabi_uldivmod>
 8002564:	4603      	mov	r3, r0
 8002566:	460c      	mov	r4, r1
 8002568:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	0c1b      	lsrs	r3, r3, #16
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	3301      	adds	r3, #1
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	613b      	str	r3, [r7, #16]
      break;
 8002584:	e087      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002586:	4b46      	ldr	r3, [pc, #280]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800258e:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d023      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	f04f 0400 	mov.w	r4, #0
 80025a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	ea03 0501 	and.w	r5, r3, r1
 80025b2:	ea04 0602 	and.w	r6, r4, r2
 80025b6:	4a3c      	ldr	r2, [pc, #240]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80025b8:	fb02 f106 	mul.w	r1, r2, r6
 80025bc:	2200      	movs	r2, #0
 80025be:	fb02 f205 	mul.w	r2, r2, r5
 80025c2:	440a      	add	r2, r1
 80025c4:	4938      	ldr	r1, [pc, #224]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80025c6:	fba5 0101 	umull	r0, r1, r5, r1
 80025ca:	1853      	adds	r3, r2, r1
 80025cc:	4619      	mov	r1, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f04f 0400 	mov.w	r4, #0
 80025d4:	461a      	mov	r2, r3
 80025d6:	4623      	mov	r3, r4
 80025d8:	f7fd fe72 	bl	80002c0 <__aeabi_uldivmod>
 80025dc:	4603      	mov	r3, r0
 80025de:	460c      	mov	r4, r1
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	e049      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e4:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	f04f 0400 	mov.w	r4, #0
 80025ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	ea03 0501 	and.w	r5, r3, r1
 80025fa:	ea04 0602 	and.w	r6, r4, r2
 80025fe:	4629      	mov	r1, r5
 8002600:	4632      	mov	r2, r6
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	f04f 0400 	mov.w	r4, #0
 800260a:	0154      	lsls	r4, r2, #5
 800260c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002610:	014b      	lsls	r3, r1, #5
 8002612:	4619      	mov	r1, r3
 8002614:	4622      	mov	r2, r4
 8002616:	1b49      	subs	r1, r1, r5
 8002618:	eb62 0206 	sbc.w	r2, r2, r6
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	f04f 0400 	mov.w	r4, #0
 8002624:	0194      	lsls	r4, r2, #6
 8002626:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800262a:	018b      	lsls	r3, r1, #6
 800262c:	1a5b      	subs	r3, r3, r1
 800262e:	eb64 0402 	sbc.w	r4, r4, r2
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	00e2      	lsls	r2, r4, #3
 800263c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002640:	00d9      	lsls	r1, r3, #3
 8002642:	460b      	mov	r3, r1
 8002644:	4614      	mov	r4, r2
 8002646:	195b      	adds	r3, r3, r5
 8002648:	eb44 0406 	adc.w	r4, r4, r6
 800264c:	f04f 0100 	mov.w	r1, #0
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	02a2      	lsls	r2, r4, #10
 8002656:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800265a:	0299      	lsls	r1, r3, #10
 800265c:	460b      	mov	r3, r1
 800265e:	4614      	mov	r4, r2
 8002660:	4618      	mov	r0, r3
 8002662:	4621      	mov	r1, r4
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f04f 0400 	mov.w	r4, #0
 800266a:	461a      	mov	r2, r3
 800266c:	4623      	mov	r3, r4
 800266e:	f7fd fe27 	bl	80002c0 <__aeabi_uldivmod>
 8002672:	4603      	mov	r3, r0
 8002674:	460c      	mov	r4, r1
 8002676:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x298>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0f1b      	lsrs	r3, r3, #28
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	613b      	str	r3, [r7, #16]
      break;
 800268e:	e002      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002692:	613b      	str	r3, [r7, #16]
      break;
 8002694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002696:	693b      	ldr	r3, [r7, #16]
}
 8002698:	4618      	mov	r0, r3
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	017d7840 	.word	0x017d7840

080026ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8083 	beq.w	80027cc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026c6:	4b95      	ldr	r3, [pc, #596]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d019      	beq.n	8002706 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026d2:	4b92      	ldr	r3, [pc, #584]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d106      	bne.n	80026ec <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026de:	4b8f      	ldr	r3, [pc, #572]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ea:	d00c      	beq.n	8002706 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ec:	4b8b      	ldr	r3, [pc, #556]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	d112      	bne.n	800271e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f8:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002704:	d10b      	bne.n	800271e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002706:	4b85      	ldr	r3, [pc, #532]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d05b      	beq.n	80027ca <HAL_RCC_OscConfig+0x11e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d157      	bne.n	80027ca <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e216      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x8a>
 8002728:	4b7c      	ldr	r3, [pc, #496]	; (800291c <HAL_RCC_OscConfig+0x270>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a7b      	ldr	r2, [pc, #492]	; (800291c <HAL_RCC_OscConfig+0x270>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e01d      	b.n	8002772 <HAL_RCC_OscConfig+0xc6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0xae>
 8002740:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b73      	ldr	r3, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x270>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a72      	ldr	r2, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e00b      	b.n	8002772 <HAL_RCC_OscConfig+0xc6>
 800275a:	4b70      	ldr	r3, [pc, #448]	; (800291c <HAL_RCC_OscConfig+0x270>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6f      	ldr	r2, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b6d      	ldr	r3, [pc, #436]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6c      	ldr	r2, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x270>)
 800276c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d013      	beq.n	80027a2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7ff fa2b 	bl	8001bd4 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002782:	f7ff fa27 	bl	8001bd4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b64      	cmp	r3, #100	; 0x64
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1db      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002794:	4b61      	ldr	r3, [pc, #388]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0xd6>
 80027a0:	e014      	b.n	80027cc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7ff fa17 	bl	8001bd4 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027aa:	f7ff fa13 	bl	8001bd4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b64      	cmp	r3, #100	; 0x64
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e1c7      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027bc:	4b57      	ldr	r3, [pc, #348]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f0      	bne.n	80027aa <HAL_RCC_OscConfig+0xfe>
 80027c8:	e000      	b.n	80027cc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d06f      	beq.n	80028b8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027d8:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d017      	beq.n	8002814 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027e4:	4b4d      	ldr	r3, [pc, #308]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027f0:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fc:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002804:	2b0c      	cmp	r3, #12
 8002806:	d11c      	bne.n	8002842 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002808:	4b44      	ldr	r3, [pc, #272]	; (800291c <HAL_RCC_OscConfig+0x270>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d116      	bne.n	8002842 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002814:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x180>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d001      	beq.n	800282c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e18f      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282c:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4938      	ldr	r1, [pc, #224]	; (800291c <HAL_RCC_OscConfig+0x270>)
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002840:	e03a      	b.n	80028b8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d020      	beq.n	800288c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284a:	4b35      	ldr	r3, [pc, #212]	; (8002920 <HAL_RCC_OscConfig+0x274>)
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7ff f9c0 	bl	8001bd4 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002858:	f7ff f9bc 	bl	8001bd4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e170      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b29      	ldr	r3, [pc, #164]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4925      	ldr	r1, [pc, #148]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
 800288a:	e015      	b.n	80028b8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_OscConfig+0x274>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7ff f99f 	bl	8001bd4 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289a:	f7ff f99b 	bl	8001bd4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e14f      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d037      	beq.n	8002934 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d016      	beq.n	80028fa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_RCC_OscConfig+0x278>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7ff f97f 	bl	8001bd4 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028da:	f7ff f97b 	bl	8001bd4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e12f      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_OscConfig+0x270>)
 80028ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x22e>
 80028f8:	e01c      	b.n	8002934 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_RCC_OscConfig+0x278>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7ff f968 	bl	8001bd4 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002906:	e00f      	b.n	8002928 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002908:	f7ff f964 	bl	8001bd4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d908      	bls.n	8002928 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e118      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	42470000 	.word	0x42470000
 8002924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	4b8a      	ldr	r3, [pc, #552]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e9      	bne.n	8002908 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8097 	beq.w	8002a70 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b83      	ldr	r3, [pc, #524]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b7f      	ldr	r3, [pc, #508]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a7e      	ldr	r2, [pc, #504]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b7c      	ldr	r3, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b79      	ldr	r3, [pc, #484]	; (8002b58 <HAL_RCC_OscConfig+0x4ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297e:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <HAL_RCC_OscConfig+0x4ac>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a75      	ldr	r2, [pc, #468]	; (8002b58 <HAL_RCC_OscConfig+0x4ac>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7ff f923 	bl	8001bd4 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7ff f91f 	bl	8001bd4 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e0d3      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	4b6c      	ldr	r3, [pc, #432]	; (8002b58 <HAL_RCC_OscConfig+0x4ac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x31a>
 80029b8:	4b66      	ldr	r3, [pc, #408]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a65      	ldr	r2, [pc, #404]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	e01c      	b.n	8002a00 <HAL_RCC_OscConfig+0x354>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x33c>
 80029ce:	4b61      	ldr	r3, [pc, #388]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a60      	ldr	r2, [pc, #384]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	4b5e      	ldr	r3, [pc, #376]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a5d      	ldr	r2, [pc, #372]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0x354>
 80029e8:	4b5a      	ldr	r3, [pc, #360]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a59      	ldr	r2, [pc, #356]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a56      	ldr	r2, [pc, #344]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7ff f8e4 	bl	8001bd4 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7ff f8e0 	bl	8001bd4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e092      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a26:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ee      	beq.n	8002a10 <HAL_RCC_OscConfig+0x364>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7ff f8ce 	bl	8001bd4 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7ff f8ca 	bl	8001bd4 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e07c      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a52:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4a3a      	ldr	r2, [pc, #232]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d068      	beq.n	8002b4a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a78:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d060      	beq.n	8002b46 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d145      	bne.n	8002b18 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8c:	4b33      	ldr	r3, [pc, #204]	; (8002b5c <HAL_RCC_OscConfig+0x4b0>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7ff f89f 	bl	8001bd4 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7ff f89b 	bl	8001bd4 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e04f      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aac:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	019b      	lsls	r3, r3, #6
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	071b      	lsls	r3, r3, #28
 8002ae4:	491b      	ldr	r1, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_RCC_OscConfig+0x4b0>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7ff f870 	bl	8001bd4 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7ff f86c 	bl	8001bd4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e020      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x44c>
 8002b16:	e018      	b.n	8002b4a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_RCC_OscConfig+0x4b0>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7ff f859 	bl	8001bd4 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b26:	f7ff f855 	bl	8001bd4 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e009      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_OscConfig+0x4a8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x47a>
 8002b44:	e001      	b.n	8002b4a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	42470060 	.word	0x42470060

08002b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e01d      	b.n	8002bae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe fca4 	bl	80014d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f000 fa40 	bl	8003024 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0201 	orr.w	r2, r2, #1
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b06      	cmp	r3, #6
 8002bde:	d007      	beq.n	8002bf0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10f      	bne.n	8002c46 <HAL_TIM_Base_Stop_IT+0x48>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a1a      	ldr	r2, [r3, #32]
 8002c2c:	f240 4344 	movw	r3, #1092	; 0x444
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_TIM_Base_Stop_IT+0x48>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0202 	mvn.w	r2, #2
 8002c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f9a5 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f997 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f9a8 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d122      	bne.n	8002d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d11b      	bne.n	8002d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0204 	mvn.w	r2, #4
 8002cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f97b 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f96d 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f97e 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d122      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d11b      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0208 	mvn.w	r2, #8
 8002d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f951 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f943 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f954 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d122      	bne.n	8002dac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d11b      	bne.n	8002dac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0210 	mvn.w	r2, #16
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2208      	movs	r2, #8
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f927 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f919 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f92a 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d10e      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d107      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0201 	mvn.w	r2, #1
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fd ffa2 	bl	8000d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b80      	cmp	r3, #128	; 0x80
 8002de4:	d10e      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b80      	cmp	r3, #128	; 0x80
 8002df2:	d107      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa99 	bl	8003336 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b40      	cmp	r3, #64	; 0x40
 8002e10:	d10e      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d107      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8ef 	bl	800300e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d10e      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d107      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0220 	mvn.w	r2, #32
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fa63 	bl	8003322 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_TIM_ConfigClockSource+0x18>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0a6      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x166>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d067      	beq.n	8002f84 <HAL_TIM_ConfigClockSource+0x120>
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d80b      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x6c>
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d073      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x140>
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d802      	bhi.n	8002ec6 <HAL_TIM_ConfigClockSource+0x62>
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d06f      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ec4:	e078      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d06c      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x140>
 8002eca:	2b30      	cmp	r3, #48	; 0x30
 8002ecc:	d06a      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ece:	e073      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ed0:	2b70      	cmp	r3, #112	; 0x70
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_TIM_ConfigClockSource+0x8c>
 8002ed4:	2b70      	cmp	r3, #112	; 0x70
 8002ed6:	d804      	bhi.n	8002ee2 <HAL_TIM_ConfigClockSource+0x7e>
 8002ed8:	2b50      	cmp	r3, #80	; 0x50
 8002eda:	d033      	beq.n	8002f44 <HAL_TIM_ConfigClockSource+0xe0>
 8002edc:	2b60      	cmp	r3, #96	; 0x60
 8002ede:	d041      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ee0:	e06a      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee6:	d066      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x152>
 8002ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eec:	d017      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002eee:	e063      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f000 f9aa 	bl	8003258 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]
      break;
 8002f1c:	e04c      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f000 f993 	bl	8003258 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f40:	609a      	str	r2, [r3, #8]
      break;
 8002f42:	e039      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	461a      	mov	r2, r3
 8002f52:	f000 f907 	bl	8003164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2150      	movs	r1, #80	; 0x50
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f960 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002f62:	e029      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f000 f926 	bl	80031c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2160      	movs	r1, #96	; 0x60
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f950 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002f82:	e019      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	461a      	mov	r2, r3
 8002f92:	f000 f8e7 	bl	8003164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2140      	movs	r1, #64	; 0x40
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f940 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002fa2:	e009      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 f937 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002fb4:	e000      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002fb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a40      	ldr	r2, [pc, #256]	; (8003138 <TIM_Base_SetConfig+0x114>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d00f      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a3d      	ldr	r2, [pc, #244]	; (800313c <TIM_Base_SetConfig+0x118>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00b      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a3c      	ldr	r2, [pc, #240]	; (8003140 <TIM_Base_SetConfig+0x11c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d007      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <TIM_Base_SetConfig+0x120>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a3a      	ldr	r2, [pc, #232]	; (8003148 <TIM_Base_SetConfig+0x124>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d108      	bne.n	8003076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a2f      	ldr	r2, [pc, #188]	; (8003138 <TIM_Base_SetConfig+0x114>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d02b      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d027      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a2c      	ldr	r2, [pc, #176]	; (800313c <TIM_Base_SetConfig+0x118>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d023      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a2b      	ldr	r2, [pc, #172]	; (8003140 <TIM_Base_SetConfig+0x11c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01f      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a2a      	ldr	r2, [pc, #168]	; (8003144 <TIM_Base_SetConfig+0x120>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01b      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a29      	ldr	r2, [pc, #164]	; (8003148 <TIM_Base_SetConfig+0x124>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d017      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a28      	ldr	r2, [pc, #160]	; (800314c <TIM_Base_SetConfig+0x128>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a27      	ldr	r2, [pc, #156]	; (8003150 <TIM_Base_SetConfig+0x12c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00f      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <TIM_Base_SetConfig+0x130>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a25      	ldr	r2, [pc, #148]	; (8003158 <TIM_Base_SetConfig+0x134>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a24      	ldr	r2, [pc, #144]	; (800315c <TIM_Base_SetConfig+0x138>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a23      	ldr	r2, [pc, #140]	; (8003160 <TIM_Base_SetConfig+0x13c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d108      	bne.n	80030e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <TIM_Base_SetConfig+0x114>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_Base_SetConfig+0xf8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <TIM_Base_SetConfig+0x124>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	615a      	str	r2, [r3, #20]
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40000c00 	.word	0x40000c00
 8003148:	40010400 	.word	0x40010400
 800314c:	40014000 	.word	0x40014000
 8003150:	40014400 	.word	0x40014400
 8003154:	40014800 	.word	0x40014800
 8003158:	40001800 	.word	0x40001800
 800315c:	40001c00 	.word	0x40001c00
 8003160:	40002000 	.word	0x40002000

08003164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 0201 	bic.w	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f023 030a 	bic.w	r3, r3, #10
 80031a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b087      	sub	sp, #28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0210 	bic.w	r2, r3, #16
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	031b      	lsls	r3, r3, #12
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	f043 0307 	orr.w	r3, r3, #7
 8003244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	431a      	orrs	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	609a      	str	r2, [r3, #8]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e032      	b.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032e8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e03f      	b.n	80033dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d106      	bne.n	8003376 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7fe f911 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2224      	movs	r2, #36	; 0x24
 800337a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800338c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f9b2 	bl	80036f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b20      	cmp	r3, #32
 8003402:	f040 8083 	bne.w	800350c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <HAL_UART_Transmit+0x2e>
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e07b      	b.n	800350e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_UART_Transmit+0x40>
 8003420:	2302      	movs	r3, #2
 8003422:	e074      	b.n	800350e <HAL_UART_Transmit+0x12a>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2221      	movs	r2, #33	; 0x21
 8003436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800343a:	f7fe fbcb 	bl	8001bd4 <HAL_GetTick>
 800343e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800344c:	e042      	b.n	80034d4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003464:	d122      	bne.n	80034ac <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f8f6 	bl	8003662 <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e046      	b.n	800350e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003492:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d103      	bne.n	80034a4 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	3302      	adds	r3, #2
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	e017      	b.n	80034d4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	e013      	b.n	80034d4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2200      	movs	r2, #0
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f8d3 	bl	8003662 <UART_WaitOnFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e023      	b.n	800350e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	60ba      	str	r2, [r7, #8]
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1b7      	bne.n	800344e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2200      	movs	r2, #0
 80034e6:	2140      	movs	r1, #64	; 0x40
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f8ba 	bl	8003662 <UART_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e00a      	b.n	800350e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b088      	sub	sp, #32
 800351a:	af02      	add	r7, sp, #8
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	4613      	mov	r3, r2
 8003524:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	f040 8090 	bne.w	8003658 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_UART_Receive+0x2e>
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e088      	b.n	800365a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_UART_Receive+0x40>
 8003552:	2302      	movs	r3, #2
 8003554:	e081      	b.n	800365a <HAL_UART_Receive+0x144>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2222      	movs	r2, #34	; 0x22
 8003568:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800356c:	f7fe fb32 	bl	8001bd4 <HAL_GetTick>
 8003570:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	88fa      	ldrh	r2, [r7, #6]
 8003576:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	88fa      	ldrh	r2, [r7, #6]
 800357c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800357e:	e05c      	b.n	800363a <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003596:	d12b      	bne.n	80035f0 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2200      	movs	r2, #0
 80035a0:	2120      	movs	r1, #32
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f85d 	bl	8003662 <UART_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e053      	b.n	800365a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3302      	adds	r3, #2
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	e030      	b.n	800363a <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3301      	adds	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	e024      	b.n	800363a <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2200      	movs	r2, #0
 80035f8:	2120      	movs	r1, #32
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f831 	bl	8003662 <UART_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e027      	b.n	800365a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d108      	bne.n	8003624 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	60ba      	str	r2, [r7, #8]
 800361e:	b2ca      	uxtb	r2, r1
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	e00a      	b.n	800363a <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d19d      	bne.n	8003580 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003658:	2302      	movs	r3, #2
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4613      	mov	r3, r2
 8003670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003672:	e02c      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d028      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x30>
 8003682:	f7fe faa7 	bl	8001bd4 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	429a      	cmp	r2, r3
 8003690:	d21d      	bcs.n	80036ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e00f      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	429a      	cmp	r2, r3
 80036dc:	bf0c      	ite	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	2300      	movne	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d0c3      	beq.n	8003674 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	b5b0      	push	{r4, r5, r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003738:	f023 030c 	bic.w	r3, r3, #12
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	68f9      	ldr	r1, [r7, #12]
 8003742:	430b      	orrs	r3, r1
 8003744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699a      	ldr	r2, [r3, #24]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003764:	f040 80e4 	bne.w	8003930 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4aab      	ldr	r2, [pc, #684]	; (8003a1c <UART_SetConfig+0x324>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <UART_SetConfig+0x84>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4aaa      	ldr	r2, [pc, #680]	; (8003a20 <UART_SetConfig+0x328>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d16c      	bne.n	8003856 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800377c:	f7fe fe30 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 8003780:	4602      	mov	r2, r0
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009a      	lsls	r2, r3, #2
 800378a:	441a      	add	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	4aa3      	ldr	r2, [pc, #652]	; (8003a24 <UART_SetConfig+0x32c>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	011c      	lsls	r4, r3, #4
 80037a0:	f7fe fe1e 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 80037a4:	4602      	mov	r2, r0
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009a      	lsls	r2, r3, #2
 80037ae:	441a      	add	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80037ba:	f7fe fe11 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009a      	lsls	r2, r3, #2
 80037c8:	441a      	add	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	4a93      	ldr	r2, [pc, #588]	; (8003a24 <UART_SetConfig+0x32c>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2264      	movs	r2, #100	; 0x64
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	1aeb      	subs	r3, r5, r3
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	3332      	adds	r3, #50	; 0x32
 80037e8:	4a8e      	ldr	r2, [pc, #568]	; (8003a24 <UART_SetConfig+0x32c>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037f6:	441c      	add	r4, r3
 80037f8:	f7fe fdf2 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009a      	lsls	r2, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003812:	f7fe fde5 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 8003816:	4602      	mov	r2, r0
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009a      	lsls	r2, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	4a7d      	ldr	r2, [pc, #500]	; (8003a24 <UART_SetConfig+0x32c>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2264      	movs	r2, #100	; 0x64
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	1aeb      	subs	r3, r5, r3
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	3332      	adds	r3, #50	; 0x32
 8003840:	4a78      	ldr	r2, [pc, #480]	; (8003a24 <UART_SetConfig+0x32c>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	f003 0207 	and.w	r2, r3, #7
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4422      	add	r2, r4
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	e154      	b.n	8003b00 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003856:	f7fe fdaf 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 800385a:	4602      	mov	r2, r0
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009a      	lsls	r2, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	4a6c      	ldr	r2, [pc, #432]	; (8003a24 <UART_SetConfig+0x32c>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	011c      	lsls	r4, r3, #4
 800387a:	f7fe fd9d 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 800387e:	4602      	mov	r2, r0
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009a      	lsls	r2, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fbb2 f5f3 	udiv	r5, r2, r3
 8003894:	f7fe fd90 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003898:	4602      	mov	r2, r0
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009a      	lsls	r2, r3, #2
 80038a2:	441a      	add	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	4a5d      	ldr	r2, [pc, #372]	; (8003a24 <UART_SetConfig+0x32c>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	2264      	movs	r2, #100	; 0x64
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	1aeb      	subs	r3, r5, r3
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	3332      	adds	r3, #50	; 0x32
 80038c2:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <UART_SetConfig+0x32c>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038d0:	441c      	add	r4, r3
 80038d2:	f7fe fd71 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80038ec:	f7fe fd64 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009a      	lsls	r2, r3, #2
 80038fa:	441a      	add	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	4a47      	ldr	r2, [pc, #284]	; (8003a24 <UART_SetConfig+0x32c>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	2264      	movs	r2, #100	; 0x64
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	1aeb      	subs	r3, r5, r3
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	3332      	adds	r3, #50	; 0x32
 800391a:	4a42      	ldr	r2, [pc, #264]	; (8003a24 <UART_SetConfig+0x32c>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	f003 0207 	and.w	r2, r3, #7
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4422      	add	r2, r4
 800392c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800392e:	e0e7      	b.n	8003b00 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a39      	ldr	r2, [pc, #228]	; (8003a1c <UART_SetConfig+0x324>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <UART_SetConfig+0x24c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a38      	ldr	r2, [pc, #224]	; (8003a20 <UART_SetConfig+0x328>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d171      	bne.n	8003a28 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003944:	f7fe fd4c 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 8003948:	4602      	mov	r2, r0
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	009a      	lsls	r2, r3, #2
 8003952:	441a      	add	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	4a31      	ldr	r2, [pc, #196]	; (8003a24 <UART_SetConfig+0x32c>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	011c      	lsls	r4, r3, #4
 8003968:	f7fe fd3a 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 800396c:	4602      	mov	r2, r0
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	009a      	lsls	r2, r3, #2
 8003976:	441a      	add	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003982:	f7fe fd2d 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 8003986:	4602      	mov	r2, r0
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009a      	lsls	r2, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <UART_SetConfig+0x32c>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2264      	movs	r2, #100	; 0x64
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	1aeb      	subs	r3, r5, r3
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	3332      	adds	r3, #50	; 0x32
 80039b0:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <UART_SetConfig+0x32c>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039bc:	441c      	add	r4, r3
 80039be:	f7fe fd0f 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009a      	lsls	r2, r3, #2
 80039cc:	441a      	add	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80039d8:	f7fe fd02 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009a      	lsls	r2, r3, #2
 80039e6:	441a      	add	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f2:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <UART_SetConfig+0x32c>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	2264      	movs	r2, #100	; 0x64
 80039fc:	fb02 f303 	mul.w	r3, r2, r3
 8003a00:	1aeb      	subs	r3, r5, r3
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	3332      	adds	r3, #50	; 0x32
 8003a06:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <UART_SetConfig+0x32c>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 020f 	and.w	r2, r3, #15
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4422      	add	r2, r4
 8003a18:	609a      	str	r2, [r3, #8]
 8003a1a:	e071      	b.n	8003b00 <UART_SetConfig+0x408>
 8003a1c:	40011000 	.word	0x40011000
 8003a20:	40011400 	.word	0x40011400
 8003a24:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003a28:	f7fe fcc6 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009a      	lsls	r2, r3, #2
 8003a36:	441a      	add	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a42:	4a31      	ldr	r2, [pc, #196]	; (8003b08 <UART_SetConfig+0x410>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	011c      	lsls	r4, r3, #4
 8003a4c:	f7fe fcb4 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009a      	lsls	r2, r3, #2
 8003a5a:	441a      	add	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a66:	f7fe fca7 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009a      	lsls	r2, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <UART_SetConfig+0x410>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	2264      	movs	r2, #100	; 0x64
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	1aeb      	subs	r3, r5, r3
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	3332      	adds	r3, #50	; 0x32
 8003a94:	4a1c      	ldr	r2, [pc, #112]	; (8003b08 <UART_SetConfig+0x410>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa0:	441c      	add	r4, r3
 8003aa2:	f7fe fc89 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	009a      	lsls	r2, r3, #2
 8003ab0:	441a      	add	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	fbb2 f5f3 	udiv	r5, r2, r3
 8003abc:	f7fe fc7c 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009a      	lsls	r2, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <UART_SetConfig+0x410>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	2264      	movs	r2, #100	; 0x64
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	1aeb      	subs	r3, r5, r3
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	3332      	adds	r3, #50	; 0x32
 8003aea:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <UART_SetConfig+0x410>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	f003 020f 	and.w	r2, r3, #15
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4422      	add	r2, r4
 8003afc:	609a      	str	r2, [r3, #8]
}
 8003afe:	e7ff      	b.n	8003b00 <UART_SetConfig+0x408>
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bdb0      	pop	{r4, r5, r7, pc}
 8003b08:	51eb851f 	.word	0x51eb851f

08003b0c <__errno>:
 8003b0c:	4b01      	ldr	r3, [pc, #4]	; (8003b14 <__errno+0x8>)
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000014 	.word	0x20000014

08003b18 <__libc_init_array>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	4e0d      	ldr	r6, [pc, #52]	; (8003b50 <__libc_init_array+0x38>)
 8003b1c:	4c0d      	ldr	r4, [pc, #52]	; (8003b54 <__libc_init_array+0x3c>)
 8003b1e:	1ba4      	subs	r4, r4, r6
 8003b20:	10a4      	asrs	r4, r4, #2
 8003b22:	2500      	movs	r5, #0
 8003b24:	42a5      	cmp	r5, r4
 8003b26:	d109      	bne.n	8003b3c <__libc_init_array+0x24>
 8003b28:	4e0b      	ldr	r6, [pc, #44]	; (8003b58 <__libc_init_array+0x40>)
 8003b2a:	4c0c      	ldr	r4, [pc, #48]	; (8003b5c <__libc_init_array+0x44>)
 8003b2c:	f000 fd74 	bl	8004618 <_init>
 8003b30:	1ba4      	subs	r4, r4, r6
 8003b32:	10a4      	asrs	r4, r4, #2
 8003b34:	2500      	movs	r5, #0
 8003b36:	42a5      	cmp	r5, r4
 8003b38:	d105      	bne.n	8003b46 <__libc_init_array+0x2e>
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b40:	4798      	blx	r3
 8003b42:	3501      	adds	r5, #1
 8003b44:	e7ee      	b.n	8003b24 <__libc_init_array+0xc>
 8003b46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b4a:	4798      	blx	r3
 8003b4c:	3501      	adds	r5, #1
 8003b4e:	e7f2      	b.n	8003b36 <__libc_init_array+0x1e>
 8003b50:	08004864 	.word	0x08004864
 8003b54:	08004864 	.word	0x08004864
 8003b58:	08004864 	.word	0x08004864
 8003b5c:	08004868 	.word	0x08004868

08003b60 <memset>:
 8003b60:	4402      	add	r2, r0
 8003b62:	4603      	mov	r3, r0
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d100      	bne.n	8003b6a <memset+0xa>
 8003b68:	4770      	bx	lr
 8003b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b6e:	e7f9      	b.n	8003b64 <memset+0x4>

08003b70 <rand>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <rand+0x50>)
 8003b74:	681c      	ldr	r4, [r3, #0]
 8003b76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b78:	b97b      	cbnz	r3, 8003b9a <rand+0x2a>
 8003b7a:	2018      	movs	r0, #24
 8003b7c:	f000 f93e 	bl	8003dfc <malloc>
 8003b80:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <rand+0x54>)
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <rand+0x58>)
 8003b84:	63a0      	str	r0, [r4, #56]	; 0x38
 8003b86:	e9c0 2300 	strd	r2, r3, [r0]
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <rand+0x5c>)
 8003b8c:	6083      	str	r3, [r0, #8]
 8003b8e:	230b      	movs	r3, #11
 8003b90:	8183      	strh	r3, [r0, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	2300      	movs	r3, #0
 8003b96:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003b9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b9c:	480c      	ldr	r0, [pc, #48]	; (8003bd0 <rand+0x60>)
 8003b9e:	690a      	ldr	r2, [r1, #16]
 8003ba0:	694b      	ldr	r3, [r1, #20]
 8003ba2:	4c0c      	ldr	r4, [pc, #48]	; (8003bd4 <rand+0x64>)
 8003ba4:	4350      	muls	r0, r2
 8003ba6:	fb04 0003 	mla	r0, r4, r3, r0
 8003baa:	fba2 2304 	umull	r2, r3, r2, r4
 8003bae:	4403      	add	r3, r0
 8003bb0:	1c54      	adds	r4, r2, #1
 8003bb2:	f143 0500 	adc.w	r5, r3, #0
 8003bb6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003bba:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	20000014 	.word	0x20000014
 8003bc4:	abcd330e 	.word	0xabcd330e
 8003bc8:	e66d1234 	.word	0xe66d1234
 8003bcc:	0005deec 	.word	0x0005deec
 8003bd0:	5851f42d 	.word	0x5851f42d
 8003bd4:	4c957f2d 	.word	0x4c957f2d

08003bd8 <siprintf>:
 8003bd8:	b40e      	push	{r1, r2, r3}
 8003bda:	b500      	push	{lr}
 8003bdc:	b09c      	sub	sp, #112	; 0x70
 8003bde:	ab1d      	add	r3, sp, #116	; 0x74
 8003be0:	9002      	str	r0, [sp, #8]
 8003be2:	9006      	str	r0, [sp, #24]
 8003be4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003be8:	4809      	ldr	r0, [pc, #36]	; (8003c10 <siprintf+0x38>)
 8003bea:	9107      	str	r1, [sp, #28]
 8003bec:	9104      	str	r1, [sp, #16]
 8003bee:	4909      	ldr	r1, [pc, #36]	; (8003c14 <siprintf+0x3c>)
 8003bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bf4:	9105      	str	r1, [sp, #20]
 8003bf6:	6800      	ldr	r0, [r0, #0]
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	a902      	add	r1, sp, #8
 8003bfc:	f000 fa1a 	bl	8004034 <_svfiprintf_r>
 8003c00:	9b02      	ldr	r3, [sp, #8]
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	b01c      	add	sp, #112	; 0x70
 8003c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c0c:	b003      	add	sp, #12
 8003c0e:	4770      	bx	lr
 8003c10:	20000014 	.word	0x20000014
 8003c14:	ffff0208 	.word	0xffff0208

08003c18 <strcpy>:
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c1e:	f803 2b01 	strb.w	r2, [r3], #1
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	d1f9      	bne.n	8003c1a <strcpy+0x2>
 8003c26:	4770      	bx	lr

08003c28 <strtok>:
 8003c28:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <strtok+0x50>)
 8003c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c2e:	681d      	ldr	r5, [r3, #0]
 8003c30:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003c32:	4606      	mov	r6, r0
 8003c34:	460f      	mov	r7, r1
 8003c36:	b9b4      	cbnz	r4, 8003c66 <strtok+0x3e>
 8003c38:	2050      	movs	r0, #80	; 0x50
 8003c3a:	f000 f8df 	bl	8003dfc <malloc>
 8003c3e:	65a8      	str	r0, [r5, #88]	; 0x58
 8003c40:	e9c0 4400 	strd	r4, r4, [r0]
 8003c44:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003c48:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003c4c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003c50:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003c54:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003c58:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003c5c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003c60:	6184      	str	r4, [r0, #24]
 8003c62:	7704      	strb	r4, [r0, #28]
 8003c64:	6244      	str	r4, [r0, #36]	; 0x24
 8003c66:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003c68:	4639      	mov	r1, r7
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c72:	f000 b803 	b.w	8003c7c <__strtok_r>
 8003c76:	bf00      	nop
 8003c78:	20000014 	.word	0x20000014

08003c7c <__strtok_r>:
 8003c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c7e:	b918      	cbnz	r0, 8003c88 <__strtok_r+0xc>
 8003c80:	6810      	ldr	r0, [r2, #0]
 8003c82:	b908      	cbnz	r0, 8003c88 <__strtok_r+0xc>
 8003c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c86:	4620      	mov	r0, r4
 8003c88:	4604      	mov	r4, r0
 8003c8a:	460f      	mov	r7, r1
 8003c8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003c90:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003c94:	b91e      	cbnz	r6, 8003c9e <__strtok_r+0x22>
 8003c96:	b96d      	cbnz	r5, 8003cb4 <__strtok_r+0x38>
 8003c98:	6015      	str	r5, [r2, #0]
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	e7f2      	b.n	8003c84 <__strtok_r+0x8>
 8003c9e:	42b5      	cmp	r5, r6
 8003ca0:	d1f6      	bne.n	8003c90 <__strtok_r+0x14>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1ef      	bne.n	8003c86 <__strtok_r+0xa>
 8003ca6:	6014      	str	r4, [r2, #0]
 8003ca8:	7003      	strb	r3, [r0, #0]
 8003caa:	e7eb      	b.n	8003c84 <__strtok_r+0x8>
 8003cac:	462b      	mov	r3, r5
 8003cae:	e00d      	b.n	8003ccc <__strtok_r+0x50>
 8003cb0:	b926      	cbnz	r6, 8003cbc <__strtok_r+0x40>
 8003cb2:	461c      	mov	r4, r3
 8003cb4:	4623      	mov	r3, r4
 8003cb6:	460f      	mov	r7, r1
 8003cb8:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003cbc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003cc0:	42b5      	cmp	r5, r6
 8003cc2:	d1f5      	bne.n	8003cb0 <__strtok_r+0x34>
 8003cc4:	2d00      	cmp	r5, #0
 8003cc6:	d0f1      	beq.n	8003cac <__strtok_r+0x30>
 8003cc8:	2100      	movs	r1, #0
 8003cca:	7021      	strb	r1, [r4, #0]
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e7d9      	b.n	8003c84 <__strtok_r+0x8>

08003cd0 <_strtol_l.isra.0>:
 8003cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	4689      	mov	r9, r1
 8003cd8:	4692      	mov	sl, r2
 8003cda:	461e      	mov	r6, r3
 8003cdc:	460f      	mov	r7, r1
 8003cde:	463d      	mov	r5, r7
 8003ce0:	9808      	ldr	r0, [sp, #32]
 8003ce2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ce6:	f000 f885 	bl	8003df4 <__locale_ctype_ptr_l>
 8003cea:	4420      	add	r0, r4
 8003cec:	7843      	ldrb	r3, [r0, #1]
 8003cee:	f013 0308 	ands.w	r3, r3, #8
 8003cf2:	d132      	bne.n	8003d5a <_strtol_l.isra.0+0x8a>
 8003cf4:	2c2d      	cmp	r4, #45	; 0x2d
 8003cf6:	d132      	bne.n	8003d5e <_strtol_l.isra.0+0x8e>
 8003cf8:	787c      	ldrb	r4, [r7, #1]
 8003cfa:	1cbd      	adds	r5, r7, #2
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	2e00      	cmp	r6, #0
 8003d00:	d05d      	beq.n	8003dbe <_strtol_l.isra.0+0xee>
 8003d02:	2e10      	cmp	r6, #16
 8003d04:	d109      	bne.n	8003d1a <_strtol_l.isra.0+0x4a>
 8003d06:	2c30      	cmp	r4, #48	; 0x30
 8003d08:	d107      	bne.n	8003d1a <_strtol_l.isra.0+0x4a>
 8003d0a:	782b      	ldrb	r3, [r5, #0]
 8003d0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003d10:	2b58      	cmp	r3, #88	; 0x58
 8003d12:	d14f      	bne.n	8003db4 <_strtol_l.isra.0+0xe4>
 8003d14:	786c      	ldrb	r4, [r5, #1]
 8003d16:	2610      	movs	r6, #16
 8003d18:	3502      	adds	r5, #2
 8003d1a:	2a00      	cmp	r2, #0
 8003d1c:	bf14      	ite	ne
 8003d1e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003d22:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003d26:	2700      	movs	r7, #0
 8003d28:	fbb1 fcf6 	udiv	ip, r1, r6
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003d32:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003d36:	2b09      	cmp	r3, #9
 8003d38:	d817      	bhi.n	8003d6a <_strtol_l.isra.0+0x9a>
 8003d3a:	461c      	mov	r4, r3
 8003d3c:	42a6      	cmp	r6, r4
 8003d3e:	dd23      	ble.n	8003d88 <_strtol_l.isra.0+0xb8>
 8003d40:	1c7b      	adds	r3, r7, #1
 8003d42:	d007      	beq.n	8003d54 <_strtol_l.isra.0+0x84>
 8003d44:	4584      	cmp	ip, r0
 8003d46:	d31c      	bcc.n	8003d82 <_strtol_l.isra.0+0xb2>
 8003d48:	d101      	bne.n	8003d4e <_strtol_l.isra.0+0x7e>
 8003d4a:	45a6      	cmp	lr, r4
 8003d4c:	db19      	blt.n	8003d82 <_strtol_l.isra.0+0xb2>
 8003d4e:	fb00 4006 	mla	r0, r0, r6, r4
 8003d52:	2701      	movs	r7, #1
 8003d54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d58:	e7eb      	b.n	8003d32 <_strtol_l.isra.0+0x62>
 8003d5a:	462f      	mov	r7, r5
 8003d5c:	e7bf      	b.n	8003cde <_strtol_l.isra.0+0xe>
 8003d5e:	2c2b      	cmp	r4, #43	; 0x2b
 8003d60:	bf04      	itt	eq
 8003d62:	1cbd      	addeq	r5, r7, #2
 8003d64:	787c      	ldrbeq	r4, [r7, #1]
 8003d66:	461a      	mov	r2, r3
 8003d68:	e7c9      	b.n	8003cfe <_strtol_l.isra.0+0x2e>
 8003d6a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003d6e:	2b19      	cmp	r3, #25
 8003d70:	d801      	bhi.n	8003d76 <_strtol_l.isra.0+0xa6>
 8003d72:	3c37      	subs	r4, #55	; 0x37
 8003d74:	e7e2      	b.n	8003d3c <_strtol_l.isra.0+0x6c>
 8003d76:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003d7a:	2b19      	cmp	r3, #25
 8003d7c:	d804      	bhi.n	8003d88 <_strtol_l.isra.0+0xb8>
 8003d7e:	3c57      	subs	r4, #87	; 0x57
 8003d80:	e7dc      	b.n	8003d3c <_strtol_l.isra.0+0x6c>
 8003d82:	f04f 37ff 	mov.w	r7, #4294967295
 8003d86:	e7e5      	b.n	8003d54 <_strtol_l.isra.0+0x84>
 8003d88:	1c7b      	adds	r3, r7, #1
 8003d8a:	d108      	bne.n	8003d9e <_strtol_l.isra.0+0xce>
 8003d8c:	2322      	movs	r3, #34	; 0x22
 8003d8e:	f8c8 3000 	str.w	r3, [r8]
 8003d92:	4608      	mov	r0, r1
 8003d94:	f1ba 0f00 	cmp.w	sl, #0
 8003d98:	d107      	bne.n	8003daa <_strtol_l.isra.0+0xda>
 8003d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9e:	b102      	cbz	r2, 8003da2 <_strtol_l.isra.0+0xd2>
 8003da0:	4240      	negs	r0, r0
 8003da2:	f1ba 0f00 	cmp.w	sl, #0
 8003da6:	d0f8      	beq.n	8003d9a <_strtol_l.isra.0+0xca>
 8003da8:	b10f      	cbz	r7, 8003dae <_strtol_l.isra.0+0xde>
 8003daa:	f105 39ff 	add.w	r9, r5, #4294967295
 8003dae:	f8ca 9000 	str.w	r9, [sl]
 8003db2:	e7f2      	b.n	8003d9a <_strtol_l.isra.0+0xca>
 8003db4:	2430      	movs	r4, #48	; 0x30
 8003db6:	2e00      	cmp	r6, #0
 8003db8:	d1af      	bne.n	8003d1a <_strtol_l.isra.0+0x4a>
 8003dba:	2608      	movs	r6, #8
 8003dbc:	e7ad      	b.n	8003d1a <_strtol_l.isra.0+0x4a>
 8003dbe:	2c30      	cmp	r4, #48	; 0x30
 8003dc0:	d0a3      	beq.n	8003d0a <_strtol_l.isra.0+0x3a>
 8003dc2:	260a      	movs	r6, #10
 8003dc4:	e7a9      	b.n	8003d1a <_strtol_l.isra.0+0x4a>
	...

08003dc8 <strtol>:
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <strtol+0x24>)
 8003dca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dcc:	681c      	ldr	r4, [r3, #0]
 8003dce:	4d08      	ldr	r5, [pc, #32]	; (8003df0 <strtol+0x28>)
 8003dd0:	6a23      	ldr	r3, [r4, #32]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf08      	it	eq
 8003dd6:	462b      	moveq	r3, r5
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	460a      	mov	r2, r1
 8003dde:	4601      	mov	r1, r0
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7ff ff75 	bl	8003cd0 <_strtol_l.isra.0>
 8003de6:	b003      	add	sp, #12
 8003de8:	bd30      	pop	{r4, r5, pc}
 8003dea:	bf00      	nop
 8003dec:	20000014 	.word	0x20000014
 8003df0:	20000078 	.word	0x20000078

08003df4 <__locale_ctype_ptr_l>:
 8003df4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003df8:	4770      	bx	lr
	...

08003dfc <malloc>:
 8003dfc:	4b02      	ldr	r3, [pc, #8]	; (8003e08 <malloc+0xc>)
 8003dfe:	4601      	mov	r1, r0
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	f000 b863 	b.w	8003ecc <_malloc_r>
 8003e06:	bf00      	nop
 8003e08:	20000014 	.word	0x20000014

08003e0c <__ascii_mbtowc>:
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	b901      	cbnz	r1, 8003e12 <__ascii_mbtowc+0x6>
 8003e10:	a901      	add	r1, sp, #4
 8003e12:	b142      	cbz	r2, 8003e26 <__ascii_mbtowc+0x1a>
 8003e14:	b14b      	cbz	r3, 8003e2a <__ascii_mbtowc+0x1e>
 8003e16:	7813      	ldrb	r3, [r2, #0]
 8003e18:	600b      	str	r3, [r1, #0]
 8003e1a:	7812      	ldrb	r2, [r2, #0]
 8003e1c:	1c10      	adds	r0, r2, #0
 8003e1e:	bf18      	it	ne
 8003e20:	2001      	movne	r0, #1
 8003e22:	b002      	add	sp, #8
 8003e24:	4770      	bx	lr
 8003e26:	4610      	mov	r0, r2
 8003e28:	e7fb      	b.n	8003e22 <__ascii_mbtowc+0x16>
 8003e2a:	f06f 0001 	mvn.w	r0, #1
 8003e2e:	e7f8      	b.n	8003e22 <__ascii_mbtowc+0x16>

08003e30 <_free_r>:
 8003e30:	b538      	push	{r3, r4, r5, lr}
 8003e32:	4605      	mov	r5, r0
 8003e34:	2900      	cmp	r1, #0
 8003e36:	d045      	beq.n	8003ec4 <_free_r+0x94>
 8003e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e3c:	1f0c      	subs	r4, r1, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bfb8      	it	lt
 8003e42:	18e4      	addlt	r4, r4, r3
 8003e44:	f000 fbb7 	bl	80045b6 <__malloc_lock>
 8003e48:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <_free_r+0x98>)
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	b933      	cbnz	r3, 8003e5e <_free_r+0x2e>
 8003e50:	6063      	str	r3, [r4, #4]
 8003e52:	6014      	str	r4, [r2, #0]
 8003e54:	4628      	mov	r0, r5
 8003e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e5a:	f000 bbad 	b.w	80045b8 <__malloc_unlock>
 8003e5e:	42a3      	cmp	r3, r4
 8003e60:	d90c      	bls.n	8003e7c <_free_r+0x4c>
 8003e62:	6821      	ldr	r1, [r4, #0]
 8003e64:	1862      	adds	r2, r4, r1
 8003e66:	4293      	cmp	r3, r2
 8003e68:	bf04      	itt	eq
 8003e6a:	681a      	ldreq	r2, [r3, #0]
 8003e6c:	685b      	ldreq	r3, [r3, #4]
 8003e6e:	6063      	str	r3, [r4, #4]
 8003e70:	bf04      	itt	eq
 8003e72:	1852      	addeq	r2, r2, r1
 8003e74:	6022      	streq	r2, [r4, #0]
 8003e76:	6004      	str	r4, [r0, #0]
 8003e78:	e7ec      	b.n	8003e54 <_free_r+0x24>
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	b10a      	cbz	r2, 8003e84 <_free_r+0x54>
 8003e80:	42a2      	cmp	r2, r4
 8003e82:	d9fa      	bls.n	8003e7a <_free_r+0x4a>
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	1858      	adds	r0, r3, r1
 8003e88:	42a0      	cmp	r0, r4
 8003e8a:	d10b      	bne.n	8003ea4 <_free_r+0x74>
 8003e8c:	6820      	ldr	r0, [r4, #0]
 8003e8e:	4401      	add	r1, r0
 8003e90:	1858      	adds	r0, r3, r1
 8003e92:	4282      	cmp	r2, r0
 8003e94:	6019      	str	r1, [r3, #0]
 8003e96:	d1dd      	bne.n	8003e54 <_free_r+0x24>
 8003e98:	6810      	ldr	r0, [r2, #0]
 8003e9a:	6852      	ldr	r2, [r2, #4]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	4401      	add	r1, r0
 8003ea0:	6019      	str	r1, [r3, #0]
 8003ea2:	e7d7      	b.n	8003e54 <_free_r+0x24>
 8003ea4:	d902      	bls.n	8003eac <_free_r+0x7c>
 8003ea6:	230c      	movs	r3, #12
 8003ea8:	602b      	str	r3, [r5, #0]
 8003eaa:	e7d3      	b.n	8003e54 <_free_r+0x24>
 8003eac:	6820      	ldr	r0, [r4, #0]
 8003eae:	1821      	adds	r1, r4, r0
 8003eb0:	428a      	cmp	r2, r1
 8003eb2:	bf04      	itt	eq
 8003eb4:	6811      	ldreq	r1, [r2, #0]
 8003eb6:	6852      	ldreq	r2, [r2, #4]
 8003eb8:	6062      	str	r2, [r4, #4]
 8003eba:	bf04      	itt	eq
 8003ebc:	1809      	addeq	r1, r1, r0
 8003ebe:	6021      	streq	r1, [r4, #0]
 8003ec0:	605c      	str	r4, [r3, #4]
 8003ec2:	e7c7      	b.n	8003e54 <_free_r+0x24>
 8003ec4:	bd38      	pop	{r3, r4, r5, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000045c 	.word	0x2000045c

08003ecc <_malloc_r>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	1ccd      	adds	r5, r1, #3
 8003ed0:	f025 0503 	bic.w	r5, r5, #3
 8003ed4:	3508      	adds	r5, #8
 8003ed6:	2d0c      	cmp	r5, #12
 8003ed8:	bf38      	it	cc
 8003eda:	250c      	movcc	r5, #12
 8003edc:	2d00      	cmp	r5, #0
 8003ede:	4606      	mov	r6, r0
 8003ee0:	db01      	blt.n	8003ee6 <_malloc_r+0x1a>
 8003ee2:	42a9      	cmp	r1, r5
 8003ee4:	d903      	bls.n	8003eee <_malloc_r+0x22>
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	6033      	str	r3, [r6, #0]
 8003eea:	2000      	movs	r0, #0
 8003eec:	bd70      	pop	{r4, r5, r6, pc}
 8003eee:	f000 fb62 	bl	80045b6 <__malloc_lock>
 8003ef2:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <_malloc_r+0xac>)
 8003ef4:	6814      	ldr	r4, [r2, #0]
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	b991      	cbnz	r1, 8003f20 <_malloc_r+0x54>
 8003efa:	4c20      	ldr	r4, [pc, #128]	; (8003f7c <_malloc_r+0xb0>)
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	b91b      	cbnz	r3, 8003f08 <_malloc_r+0x3c>
 8003f00:	4630      	mov	r0, r6
 8003f02:	f000 fb17 	bl	8004534 <_sbrk_r>
 8003f06:	6020      	str	r0, [r4, #0]
 8003f08:	4629      	mov	r1, r5
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f000 fb12 	bl	8004534 <_sbrk_r>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d124      	bne.n	8003f5e <_malloc_r+0x92>
 8003f14:	230c      	movs	r3, #12
 8003f16:	6033      	str	r3, [r6, #0]
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f000 fb4d 	bl	80045b8 <__malloc_unlock>
 8003f1e:	e7e4      	b.n	8003eea <_malloc_r+0x1e>
 8003f20:	680b      	ldr	r3, [r1, #0]
 8003f22:	1b5b      	subs	r3, r3, r5
 8003f24:	d418      	bmi.n	8003f58 <_malloc_r+0x8c>
 8003f26:	2b0b      	cmp	r3, #11
 8003f28:	d90f      	bls.n	8003f4a <_malloc_r+0x7e>
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	50cd      	str	r5, [r1, r3]
 8003f2e:	18cc      	adds	r4, r1, r3
 8003f30:	4630      	mov	r0, r6
 8003f32:	f000 fb41 	bl	80045b8 <__malloc_unlock>
 8003f36:	f104 000b 	add.w	r0, r4, #11
 8003f3a:	1d23      	adds	r3, r4, #4
 8003f3c:	f020 0007 	bic.w	r0, r0, #7
 8003f40:	1ac3      	subs	r3, r0, r3
 8003f42:	d0d3      	beq.n	8003eec <_malloc_r+0x20>
 8003f44:	425a      	negs	r2, r3
 8003f46:	50e2      	str	r2, [r4, r3]
 8003f48:	e7d0      	b.n	8003eec <_malloc_r+0x20>
 8003f4a:	428c      	cmp	r4, r1
 8003f4c:	684b      	ldr	r3, [r1, #4]
 8003f4e:	bf16      	itet	ne
 8003f50:	6063      	strne	r3, [r4, #4]
 8003f52:	6013      	streq	r3, [r2, #0]
 8003f54:	460c      	movne	r4, r1
 8003f56:	e7eb      	b.n	8003f30 <_malloc_r+0x64>
 8003f58:	460c      	mov	r4, r1
 8003f5a:	6849      	ldr	r1, [r1, #4]
 8003f5c:	e7cc      	b.n	8003ef8 <_malloc_r+0x2c>
 8003f5e:	1cc4      	adds	r4, r0, #3
 8003f60:	f024 0403 	bic.w	r4, r4, #3
 8003f64:	42a0      	cmp	r0, r4
 8003f66:	d005      	beq.n	8003f74 <_malloc_r+0xa8>
 8003f68:	1a21      	subs	r1, r4, r0
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f000 fae2 	bl	8004534 <_sbrk_r>
 8003f70:	3001      	adds	r0, #1
 8003f72:	d0cf      	beq.n	8003f14 <_malloc_r+0x48>
 8003f74:	6025      	str	r5, [r4, #0]
 8003f76:	e7db      	b.n	8003f30 <_malloc_r+0x64>
 8003f78:	2000045c 	.word	0x2000045c
 8003f7c:	20000460 	.word	0x20000460

08003f80 <__ssputs_r>:
 8003f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	688e      	ldr	r6, [r1, #8]
 8003f86:	429e      	cmp	r6, r3
 8003f88:	4682      	mov	sl, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	4690      	mov	r8, r2
 8003f8e:	4699      	mov	r9, r3
 8003f90:	d837      	bhi.n	8004002 <__ssputs_r+0x82>
 8003f92:	898a      	ldrh	r2, [r1, #12]
 8003f94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f98:	d031      	beq.n	8003ffe <__ssputs_r+0x7e>
 8003f9a:	6825      	ldr	r5, [r4, #0]
 8003f9c:	6909      	ldr	r1, [r1, #16]
 8003f9e:	1a6f      	subs	r7, r5, r1
 8003fa0:	6965      	ldr	r5, [r4, #20]
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fa8:	fb95 f5f3 	sdiv	r5, r5, r3
 8003fac:	f109 0301 	add.w	r3, r9, #1
 8003fb0:	443b      	add	r3, r7
 8003fb2:	429d      	cmp	r5, r3
 8003fb4:	bf38      	it	cc
 8003fb6:	461d      	movcc	r5, r3
 8003fb8:	0553      	lsls	r3, r2, #21
 8003fba:	d530      	bpl.n	800401e <__ssputs_r+0x9e>
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	f7ff ff85 	bl	8003ecc <_malloc_r>
 8003fc2:	4606      	mov	r6, r0
 8003fc4:	b950      	cbnz	r0, 8003fdc <__ssputs_r+0x5c>
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	f8ca 3000 	str.w	r3, [sl]
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd2:	81a3      	strh	r3, [r4, #12]
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fdc:	463a      	mov	r2, r7
 8003fde:	6921      	ldr	r1, [r4, #16]
 8003fe0:	f000 fac5 	bl	800456e <memcpy>
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fee:	81a3      	strh	r3, [r4, #12]
 8003ff0:	6126      	str	r6, [r4, #16]
 8003ff2:	6165      	str	r5, [r4, #20]
 8003ff4:	443e      	add	r6, r7
 8003ff6:	1bed      	subs	r5, r5, r7
 8003ff8:	6026      	str	r6, [r4, #0]
 8003ffa:	60a5      	str	r5, [r4, #8]
 8003ffc:	464e      	mov	r6, r9
 8003ffe:	454e      	cmp	r6, r9
 8004000:	d900      	bls.n	8004004 <__ssputs_r+0x84>
 8004002:	464e      	mov	r6, r9
 8004004:	4632      	mov	r2, r6
 8004006:	4641      	mov	r1, r8
 8004008:	6820      	ldr	r0, [r4, #0]
 800400a:	f000 fabb 	bl	8004584 <memmove>
 800400e:	68a3      	ldr	r3, [r4, #8]
 8004010:	1b9b      	subs	r3, r3, r6
 8004012:	60a3      	str	r3, [r4, #8]
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	441e      	add	r6, r3
 8004018:	6026      	str	r6, [r4, #0]
 800401a:	2000      	movs	r0, #0
 800401c:	e7dc      	b.n	8003fd8 <__ssputs_r+0x58>
 800401e:	462a      	mov	r2, r5
 8004020:	f000 facb 	bl	80045ba <_realloc_r>
 8004024:	4606      	mov	r6, r0
 8004026:	2800      	cmp	r0, #0
 8004028:	d1e2      	bne.n	8003ff0 <__ssputs_r+0x70>
 800402a:	6921      	ldr	r1, [r4, #16]
 800402c:	4650      	mov	r0, sl
 800402e:	f7ff feff 	bl	8003e30 <_free_r>
 8004032:	e7c8      	b.n	8003fc6 <__ssputs_r+0x46>

08004034 <_svfiprintf_r>:
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	461d      	mov	r5, r3
 800403a:	898b      	ldrh	r3, [r1, #12]
 800403c:	061f      	lsls	r7, r3, #24
 800403e:	b09d      	sub	sp, #116	; 0x74
 8004040:	4680      	mov	r8, r0
 8004042:	460c      	mov	r4, r1
 8004044:	4616      	mov	r6, r2
 8004046:	d50f      	bpl.n	8004068 <_svfiprintf_r+0x34>
 8004048:	690b      	ldr	r3, [r1, #16]
 800404a:	b96b      	cbnz	r3, 8004068 <_svfiprintf_r+0x34>
 800404c:	2140      	movs	r1, #64	; 0x40
 800404e:	f7ff ff3d 	bl	8003ecc <_malloc_r>
 8004052:	6020      	str	r0, [r4, #0]
 8004054:	6120      	str	r0, [r4, #16]
 8004056:	b928      	cbnz	r0, 8004064 <_svfiprintf_r+0x30>
 8004058:	230c      	movs	r3, #12
 800405a:	f8c8 3000 	str.w	r3, [r8]
 800405e:	f04f 30ff 	mov.w	r0, #4294967295
 8004062:	e0c8      	b.n	80041f6 <_svfiprintf_r+0x1c2>
 8004064:	2340      	movs	r3, #64	; 0x40
 8004066:	6163      	str	r3, [r4, #20]
 8004068:	2300      	movs	r3, #0
 800406a:	9309      	str	r3, [sp, #36]	; 0x24
 800406c:	2320      	movs	r3, #32
 800406e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004072:	2330      	movs	r3, #48	; 0x30
 8004074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004078:	9503      	str	r5, [sp, #12]
 800407a:	f04f 0b01 	mov.w	fp, #1
 800407e:	4637      	mov	r7, r6
 8004080:	463d      	mov	r5, r7
 8004082:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004086:	b10b      	cbz	r3, 800408c <_svfiprintf_r+0x58>
 8004088:	2b25      	cmp	r3, #37	; 0x25
 800408a:	d13e      	bne.n	800410a <_svfiprintf_r+0xd6>
 800408c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004090:	d00b      	beq.n	80040aa <_svfiprintf_r+0x76>
 8004092:	4653      	mov	r3, sl
 8004094:	4632      	mov	r2, r6
 8004096:	4621      	mov	r1, r4
 8004098:	4640      	mov	r0, r8
 800409a:	f7ff ff71 	bl	8003f80 <__ssputs_r>
 800409e:	3001      	adds	r0, #1
 80040a0:	f000 80a4 	beq.w	80041ec <_svfiprintf_r+0x1b8>
 80040a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a6:	4453      	add	r3, sl
 80040a8:	9309      	str	r3, [sp, #36]	; 0x24
 80040aa:	783b      	ldrb	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 809d 	beq.w	80041ec <_svfiprintf_r+0x1b8>
 80040b2:	2300      	movs	r3, #0
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295
 80040b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040bc:	9304      	str	r3, [sp, #16]
 80040be:	9307      	str	r3, [sp, #28]
 80040c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040c4:	931a      	str	r3, [sp, #104]	; 0x68
 80040c6:	462f      	mov	r7, r5
 80040c8:	2205      	movs	r2, #5
 80040ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80040ce:	4850      	ldr	r0, [pc, #320]	; (8004210 <_svfiprintf_r+0x1dc>)
 80040d0:	f7fc f8a6 	bl	8000220 <memchr>
 80040d4:	9b04      	ldr	r3, [sp, #16]
 80040d6:	b9d0      	cbnz	r0, 800410e <_svfiprintf_r+0xda>
 80040d8:	06d9      	lsls	r1, r3, #27
 80040da:	bf44      	itt	mi
 80040dc:	2220      	movmi	r2, #32
 80040de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040e2:	071a      	lsls	r2, r3, #28
 80040e4:	bf44      	itt	mi
 80040e6:	222b      	movmi	r2, #43	; 0x2b
 80040e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040ec:	782a      	ldrb	r2, [r5, #0]
 80040ee:	2a2a      	cmp	r2, #42	; 0x2a
 80040f0:	d015      	beq.n	800411e <_svfiprintf_r+0xea>
 80040f2:	9a07      	ldr	r2, [sp, #28]
 80040f4:	462f      	mov	r7, r5
 80040f6:	2000      	movs	r0, #0
 80040f8:	250a      	movs	r5, #10
 80040fa:	4639      	mov	r1, r7
 80040fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004100:	3b30      	subs	r3, #48	; 0x30
 8004102:	2b09      	cmp	r3, #9
 8004104:	d94d      	bls.n	80041a2 <_svfiprintf_r+0x16e>
 8004106:	b1b8      	cbz	r0, 8004138 <_svfiprintf_r+0x104>
 8004108:	e00f      	b.n	800412a <_svfiprintf_r+0xf6>
 800410a:	462f      	mov	r7, r5
 800410c:	e7b8      	b.n	8004080 <_svfiprintf_r+0x4c>
 800410e:	4a40      	ldr	r2, [pc, #256]	; (8004210 <_svfiprintf_r+0x1dc>)
 8004110:	1a80      	subs	r0, r0, r2
 8004112:	fa0b f000 	lsl.w	r0, fp, r0
 8004116:	4318      	orrs	r0, r3
 8004118:	9004      	str	r0, [sp, #16]
 800411a:	463d      	mov	r5, r7
 800411c:	e7d3      	b.n	80040c6 <_svfiprintf_r+0x92>
 800411e:	9a03      	ldr	r2, [sp, #12]
 8004120:	1d11      	adds	r1, r2, #4
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	9103      	str	r1, [sp, #12]
 8004126:	2a00      	cmp	r2, #0
 8004128:	db01      	blt.n	800412e <_svfiprintf_r+0xfa>
 800412a:	9207      	str	r2, [sp, #28]
 800412c:	e004      	b.n	8004138 <_svfiprintf_r+0x104>
 800412e:	4252      	negs	r2, r2
 8004130:	f043 0302 	orr.w	r3, r3, #2
 8004134:	9207      	str	r2, [sp, #28]
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	783b      	ldrb	r3, [r7, #0]
 800413a:	2b2e      	cmp	r3, #46	; 0x2e
 800413c:	d10c      	bne.n	8004158 <_svfiprintf_r+0x124>
 800413e:	787b      	ldrb	r3, [r7, #1]
 8004140:	2b2a      	cmp	r3, #42	; 0x2a
 8004142:	d133      	bne.n	80041ac <_svfiprintf_r+0x178>
 8004144:	9b03      	ldr	r3, [sp, #12]
 8004146:	1d1a      	adds	r2, r3, #4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	9203      	str	r2, [sp, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	bfb8      	it	lt
 8004150:	f04f 33ff 	movlt.w	r3, #4294967295
 8004154:	3702      	adds	r7, #2
 8004156:	9305      	str	r3, [sp, #20]
 8004158:	4d2e      	ldr	r5, [pc, #184]	; (8004214 <_svfiprintf_r+0x1e0>)
 800415a:	7839      	ldrb	r1, [r7, #0]
 800415c:	2203      	movs	r2, #3
 800415e:	4628      	mov	r0, r5
 8004160:	f7fc f85e 	bl	8000220 <memchr>
 8004164:	b138      	cbz	r0, 8004176 <_svfiprintf_r+0x142>
 8004166:	2340      	movs	r3, #64	; 0x40
 8004168:	1b40      	subs	r0, r0, r5
 800416a:	fa03 f000 	lsl.w	r0, r3, r0
 800416e:	9b04      	ldr	r3, [sp, #16]
 8004170:	4303      	orrs	r3, r0
 8004172:	3701      	adds	r7, #1
 8004174:	9304      	str	r3, [sp, #16]
 8004176:	7839      	ldrb	r1, [r7, #0]
 8004178:	4827      	ldr	r0, [pc, #156]	; (8004218 <_svfiprintf_r+0x1e4>)
 800417a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800417e:	2206      	movs	r2, #6
 8004180:	1c7e      	adds	r6, r7, #1
 8004182:	f7fc f84d 	bl	8000220 <memchr>
 8004186:	2800      	cmp	r0, #0
 8004188:	d038      	beq.n	80041fc <_svfiprintf_r+0x1c8>
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <_svfiprintf_r+0x1e8>)
 800418c:	bb13      	cbnz	r3, 80041d4 <_svfiprintf_r+0x1a0>
 800418e:	9b03      	ldr	r3, [sp, #12]
 8004190:	3307      	adds	r3, #7
 8004192:	f023 0307 	bic.w	r3, r3, #7
 8004196:	3308      	adds	r3, #8
 8004198:	9303      	str	r3, [sp, #12]
 800419a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800419c:	444b      	add	r3, r9
 800419e:	9309      	str	r3, [sp, #36]	; 0x24
 80041a0:	e76d      	b.n	800407e <_svfiprintf_r+0x4a>
 80041a2:	fb05 3202 	mla	r2, r5, r2, r3
 80041a6:	2001      	movs	r0, #1
 80041a8:	460f      	mov	r7, r1
 80041aa:	e7a6      	b.n	80040fa <_svfiprintf_r+0xc6>
 80041ac:	2300      	movs	r3, #0
 80041ae:	3701      	adds	r7, #1
 80041b0:	9305      	str	r3, [sp, #20]
 80041b2:	4619      	mov	r1, r3
 80041b4:	250a      	movs	r5, #10
 80041b6:	4638      	mov	r0, r7
 80041b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041bc:	3a30      	subs	r2, #48	; 0x30
 80041be:	2a09      	cmp	r2, #9
 80041c0:	d903      	bls.n	80041ca <_svfiprintf_r+0x196>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0c8      	beq.n	8004158 <_svfiprintf_r+0x124>
 80041c6:	9105      	str	r1, [sp, #20]
 80041c8:	e7c6      	b.n	8004158 <_svfiprintf_r+0x124>
 80041ca:	fb05 2101 	mla	r1, r5, r1, r2
 80041ce:	2301      	movs	r3, #1
 80041d0:	4607      	mov	r7, r0
 80041d2:	e7f0      	b.n	80041b6 <_svfiprintf_r+0x182>
 80041d4:	ab03      	add	r3, sp, #12
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	4622      	mov	r2, r4
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <_svfiprintf_r+0x1ec>)
 80041dc:	a904      	add	r1, sp, #16
 80041de:	4640      	mov	r0, r8
 80041e0:	f3af 8000 	nop.w
 80041e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041e8:	4681      	mov	r9, r0
 80041ea:	d1d6      	bne.n	800419a <_svfiprintf_r+0x166>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	065b      	lsls	r3, r3, #25
 80041f0:	f53f af35 	bmi.w	800405e <_svfiprintf_r+0x2a>
 80041f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041f6:	b01d      	add	sp, #116	; 0x74
 80041f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fc:	ab03      	add	r3, sp, #12
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	4622      	mov	r2, r4
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <_svfiprintf_r+0x1ec>)
 8004204:	a904      	add	r1, sp, #16
 8004206:	4640      	mov	r0, r8
 8004208:	f000 f882 	bl	8004310 <_printf_i>
 800420c:	e7ea      	b.n	80041e4 <_svfiprintf_r+0x1b0>
 800420e:	bf00      	nop
 8004210:	08004726 	.word	0x08004726
 8004214:	0800472c 	.word	0x0800472c
 8004218:	08004730 	.word	0x08004730
 800421c:	00000000 	.word	0x00000000
 8004220:	08003f81 	.word	0x08003f81

08004224 <_printf_common>:
 8004224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004228:	4691      	mov	r9, r2
 800422a:	461f      	mov	r7, r3
 800422c:	688a      	ldr	r2, [r1, #8]
 800422e:	690b      	ldr	r3, [r1, #16]
 8004230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004234:	4293      	cmp	r3, r2
 8004236:	bfb8      	it	lt
 8004238:	4613      	movlt	r3, r2
 800423a:	f8c9 3000 	str.w	r3, [r9]
 800423e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004242:	4606      	mov	r6, r0
 8004244:	460c      	mov	r4, r1
 8004246:	b112      	cbz	r2, 800424e <_printf_common+0x2a>
 8004248:	3301      	adds	r3, #1
 800424a:	f8c9 3000 	str.w	r3, [r9]
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	0699      	lsls	r1, r3, #26
 8004252:	bf42      	ittt	mi
 8004254:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004258:	3302      	addmi	r3, #2
 800425a:	f8c9 3000 	strmi.w	r3, [r9]
 800425e:	6825      	ldr	r5, [r4, #0]
 8004260:	f015 0506 	ands.w	r5, r5, #6
 8004264:	d107      	bne.n	8004276 <_printf_common+0x52>
 8004266:	f104 0a19 	add.w	sl, r4, #25
 800426a:	68e3      	ldr	r3, [r4, #12]
 800426c:	f8d9 2000 	ldr.w	r2, [r9]
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	42ab      	cmp	r3, r5
 8004274:	dc28      	bgt.n	80042c8 <_printf_common+0xa4>
 8004276:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	3300      	adds	r3, #0
 800427e:	bf18      	it	ne
 8004280:	2301      	movne	r3, #1
 8004282:	0692      	lsls	r2, r2, #26
 8004284:	d42d      	bmi.n	80042e2 <_printf_common+0xbe>
 8004286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800428a:	4639      	mov	r1, r7
 800428c:	4630      	mov	r0, r6
 800428e:	47c0      	blx	r8
 8004290:	3001      	adds	r0, #1
 8004292:	d020      	beq.n	80042d6 <_printf_common+0xb2>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	68e5      	ldr	r5, [r4, #12]
 8004298:	f8d9 2000 	ldr.w	r2, [r9]
 800429c:	f003 0306 	and.w	r3, r3, #6
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	bf08      	it	eq
 80042a4:	1aad      	subeq	r5, r5, r2
 80042a6:	68a3      	ldr	r3, [r4, #8]
 80042a8:	6922      	ldr	r2, [r4, #16]
 80042aa:	bf0c      	ite	eq
 80042ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042b0:	2500      	movne	r5, #0
 80042b2:	4293      	cmp	r3, r2
 80042b4:	bfc4      	itt	gt
 80042b6:	1a9b      	subgt	r3, r3, r2
 80042b8:	18ed      	addgt	r5, r5, r3
 80042ba:	f04f 0900 	mov.w	r9, #0
 80042be:	341a      	adds	r4, #26
 80042c0:	454d      	cmp	r5, r9
 80042c2:	d11a      	bne.n	80042fa <_printf_common+0xd6>
 80042c4:	2000      	movs	r0, #0
 80042c6:	e008      	b.n	80042da <_printf_common+0xb6>
 80042c8:	2301      	movs	r3, #1
 80042ca:	4652      	mov	r2, sl
 80042cc:	4639      	mov	r1, r7
 80042ce:	4630      	mov	r0, r6
 80042d0:	47c0      	blx	r8
 80042d2:	3001      	adds	r0, #1
 80042d4:	d103      	bne.n	80042de <_printf_common+0xba>
 80042d6:	f04f 30ff 	mov.w	r0, #4294967295
 80042da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042de:	3501      	adds	r5, #1
 80042e0:	e7c3      	b.n	800426a <_printf_common+0x46>
 80042e2:	18e1      	adds	r1, r4, r3
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	2030      	movs	r0, #48	; 0x30
 80042e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042ec:	4422      	add	r2, r4
 80042ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042f6:	3302      	adds	r3, #2
 80042f8:	e7c5      	b.n	8004286 <_printf_common+0x62>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4622      	mov	r2, r4
 80042fe:	4639      	mov	r1, r7
 8004300:	4630      	mov	r0, r6
 8004302:	47c0      	blx	r8
 8004304:	3001      	adds	r0, #1
 8004306:	d0e6      	beq.n	80042d6 <_printf_common+0xb2>
 8004308:	f109 0901 	add.w	r9, r9, #1
 800430c:	e7d8      	b.n	80042c0 <_printf_common+0x9c>
	...

08004310 <_printf_i>:
 8004310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004314:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004318:	460c      	mov	r4, r1
 800431a:	7e09      	ldrb	r1, [r1, #24]
 800431c:	b085      	sub	sp, #20
 800431e:	296e      	cmp	r1, #110	; 0x6e
 8004320:	4617      	mov	r7, r2
 8004322:	4606      	mov	r6, r0
 8004324:	4698      	mov	r8, r3
 8004326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004328:	f000 80b3 	beq.w	8004492 <_printf_i+0x182>
 800432c:	d822      	bhi.n	8004374 <_printf_i+0x64>
 800432e:	2963      	cmp	r1, #99	; 0x63
 8004330:	d036      	beq.n	80043a0 <_printf_i+0x90>
 8004332:	d80a      	bhi.n	800434a <_printf_i+0x3a>
 8004334:	2900      	cmp	r1, #0
 8004336:	f000 80b9 	beq.w	80044ac <_printf_i+0x19c>
 800433a:	2958      	cmp	r1, #88	; 0x58
 800433c:	f000 8083 	beq.w	8004446 <_printf_i+0x136>
 8004340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004344:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004348:	e032      	b.n	80043b0 <_printf_i+0xa0>
 800434a:	2964      	cmp	r1, #100	; 0x64
 800434c:	d001      	beq.n	8004352 <_printf_i+0x42>
 800434e:	2969      	cmp	r1, #105	; 0x69
 8004350:	d1f6      	bne.n	8004340 <_printf_i+0x30>
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	6813      	ldr	r3, [r2, #0]
 8004356:	0605      	lsls	r5, r0, #24
 8004358:	f103 0104 	add.w	r1, r3, #4
 800435c:	d52a      	bpl.n	80043b4 <_printf_i+0xa4>
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	da03      	bge.n	800436e <_printf_i+0x5e>
 8004366:	222d      	movs	r2, #45	; 0x2d
 8004368:	425b      	negs	r3, r3
 800436a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800436e:	486f      	ldr	r0, [pc, #444]	; (800452c <_printf_i+0x21c>)
 8004370:	220a      	movs	r2, #10
 8004372:	e039      	b.n	80043e8 <_printf_i+0xd8>
 8004374:	2973      	cmp	r1, #115	; 0x73
 8004376:	f000 809d 	beq.w	80044b4 <_printf_i+0x1a4>
 800437a:	d808      	bhi.n	800438e <_printf_i+0x7e>
 800437c:	296f      	cmp	r1, #111	; 0x6f
 800437e:	d020      	beq.n	80043c2 <_printf_i+0xb2>
 8004380:	2970      	cmp	r1, #112	; 0x70
 8004382:	d1dd      	bne.n	8004340 <_printf_i+0x30>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	f043 0320 	orr.w	r3, r3, #32
 800438a:	6023      	str	r3, [r4, #0]
 800438c:	e003      	b.n	8004396 <_printf_i+0x86>
 800438e:	2975      	cmp	r1, #117	; 0x75
 8004390:	d017      	beq.n	80043c2 <_printf_i+0xb2>
 8004392:	2978      	cmp	r1, #120	; 0x78
 8004394:	d1d4      	bne.n	8004340 <_printf_i+0x30>
 8004396:	2378      	movs	r3, #120	; 0x78
 8004398:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800439c:	4864      	ldr	r0, [pc, #400]	; (8004530 <_printf_i+0x220>)
 800439e:	e055      	b.n	800444c <_printf_i+0x13c>
 80043a0:	6813      	ldr	r3, [r2, #0]
 80043a2:	1d19      	adds	r1, r3, #4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6011      	str	r1, [r2, #0]
 80043a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043b0:	2301      	movs	r3, #1
 80043b2:	e08c      	b.n	80044ce <_printf_i+0x1be>
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6011      	str	r1, [r2, #0]
 80043b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043bc:	bf18      	it	ne
 80043be:	b21b      	sxthne	r3, r3
 80043c0:	e7cf      	b.n	8004362 <_printf_i+0x52>
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	6825      	ldr	r5, [r4, #0]
 80043c6:	1d18      	adds	r0, r3, #4
 80043c8:	6010      	str	r0, [r2, #0]
 80043ca:	0628      	lsls	r0, r5, #24
 80043cc:	d501      	bpl.n	80043d2 <_printf_i+0xc2>
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	e002      	b.n	80043d8 <_printf_i+0xc8>
 80043d2:	0668      	lsls	r0, r5, #25
 80043d4:	d5fb      	bpl.n	80043ce <_printf_i+0xbe>
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	4854      	ldr	r0, [pc, #336]	; (800452c <_printf_i+0x21c>)
 80043da:	296f      	cmp	r1, #111	; 0x6f
 80043dc:	bf14      	ite	ne
 80043de:	220a      	movne	r2, #10
 80043e0:	2208      	moveq	r2, #8
 80043e2:	2100      	movs	r1, #0
 80043e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043e8:	6865      	ldr	r5, [r4, #4]
 80043ea:	60a5      	str	r5, [r4, #8]
 80043ec:	2d00      	cmp	r5, #0
 80043ee:	f2c0 8095 	blt.w	800451c <_printf_i+0x20c>
 80043f2:	6821      	ldr	r1, [r4, #0]
 80043f4:	f021 0104 	bic.w	r1, r1, #4
 80043f8:	6021      	str	r1, [r4, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d13d      	bne.n	800447a <_printf_i+0x16a>
 80043fe:	2d00      	cmp	r5, #0
 8004400:	f040 808e 	bne.w	8004520 <_printf_i+0x210>
 8004404:	4665      	mov	r5, ip
 8004406:	2a08      	cmp	r2, #8
 8004408:	d10b      	bne.n	8004422 <_printf_i+0x112>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	07db      	lsls	r3, r3, #31
 800440e:	d508      	bpl.n	8004422 <_printf_i+0x112>
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	6862      	ldr	r2, [r4, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	bfde      	ittt	le
 8004418:	2330      	movle	r3, #48	; 0x30
 800441a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800441e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004422:	ebac 0305 	sub.w	r3, ip, r5
 8004426:	6123      	str	r3, [r4, #16]
 8004428:	f8cd 8000 	str.w	r8, [sp]
 800442c:	463b      	mov	r3, r7
 800442e:	aa03      	add	r2, sp, #12
 8004430:	4621      	mov	r1, r4
 8004432:	4630      	mov	r0, r6
 8004434:	f7ff fef6 	bl	8004224 <_printf_common>
 8004438:	3001      	adds	r0, #1
 800443a:	d14d      	bne.n	80044d8 <_printf_i+0x1c8>
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	b005      	add	sp, #20
 8004442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004446:	4839      	ldr	r0, [pc, #228]	; (800452c <_printf_i+0x21c>)
 8004448:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800444c:	6813      	ldr	r3, [r2, #0]
 800444e:	6821      	ldr	r1, [r4, #0]
 8004450:	1d1d      	adds	r5, r3, #4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6015      	str	r5, [r2, #0]
 8004456:	060a      	lsls	r2, r1, #24
 8004458:	d50b      	bpl.n	8004472 <_printf_i+0x162>
 800445a:	07ca      	lsls	r2, r1, #31
 800445c:	bf44      	itt	mi
 800445e:	f041 0120 	orrmi.w	r1, r1, #32
 8004462:	6021      	strmi	r1, [r4, #0]
 8004464:	b91b      	cbnz	r3, 800446e <_printf_i+0x15e>
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	f022 0220 	bic.w	r2, r2, #32
 800446c:	6022      	str	r2, [r4, #0]
 800446e:	2210      	movs	r2, #16
 8004470:	e7b7      	b.n	80043e2 <_printf_i+0xd2>
 8004472:	064d      	lsls	r5, r1, #25
 8004474:	bf48      	it	mi
 8004476:	b29b      	uxthmi	r3, r3
 8004478:	e7ef      	b.n	800445a <_printf_i+0x14a>
 800447a:	4665      	mov	r5, ip
 800447c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004480:	fb02 3311 	mls	r3, r2, r1, r3
 8004484:	5cc3      	ldrb	r3, [r0, r3]
 8004486:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800448a:	460b      	mov	r3, r1
 800448c:	2900      	cmp	r1, #0
 800448e:	d1f5      	bne.n	800447c <_printf_i+0x16c>
 8004490:	e7b9      	b.n	8004406 <_printf_i+0xf6>
 8004492:	6813      	ldr	r3, [r2, #0]
 8004494:	6825      	ldr	r5, [r4, #0]
 8004496:	6961      	ldr	r1, [r4, #20]
 8004498:	1d18      	adds	r0, r3, #4
 800449a:	6010      	str	r0, [r2, #0]
 800449c:	0628      	lsls	r0, r5, #24
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	d501      	bpl.n	80044a6 <_printf_i+0x196>
 80044a2:	6019      	str	r1, [r3, #0]
 80044a4:	e002      	b.n	80044ac <_printf_i+0x19c>
 80044a6:	066a      	lsls	r2, r5, #25
 80044a8:	d5fb      	bpl.n	80044a2 <_printf_i+0x192>
 80044aa:	8019      	strh	r1, [r3, #0]
 80044ac:	2300      	movs	r3, #0
 80044ae:	6123      	str	r3, [r4, #16]
 80044b0:	4665      	mov	r5, ip
 80044b2:	e7b9      	b.n	8004428 <_printf_i+0x118>
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	1d19      	adds	r1, r3, #4
 80044b8:	6011      	str	r1, [r2, #0]
 80044ba:	681d      	ldr	r5, [r3, #0]
 80044bc:	6862      	ldr	r2, [r4, #4]
 80044be:	2100      	movs	r1, #0
 80044c0:	4628      	mov	r0, r5
 80044c2:	f7fb fead 	bl	8000220 <memchr>
 80044c6:	b108      	cbz	r0, 80044cc <_printf_i+0x1bc>
 80044c8:	1b40      	subs	r0, r0, r5
 80044ca:	6060      	str	r0, [r4, #4]
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	6123      	str	r3, [r4, #16]
 80044d0:	2300      	movs	r3, #0
 80044d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044d6:	e7a7      	b.n	8004428 <_printf_i+0x118>
 80044d8:	6923      	ldr	r3, [r4, #16]
 80044da:	462a      	mov	r2, r5
 80044dc:	4639      	mov	r1, r7
 80044de:	4630      	mov	r0, r6
 80044e0:	47c0      	blx	r8
 80044e2:	3001      	adds	r0, #1
 80044e4:	d0aa      	beq.n	800443c <_printf_i+0x12c>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	079b      	lsls	r3, r3, #30
 80044ea:	d413      	bmi.n	8004514 <_printf_i+0x204>
 80044ec:	68e0      	ldr	r0, [r4, #12]
 80044ee:	9b03      	ldr	r3, [sp, #12]
 80044f0:	4298      	cmp	r0, r3
 80044f2:	bfb8      	it	lt
 80044f4:	4618      	movlt	r0, r3
 80044f6:	e7a3      	b.n	8004440 <_printf_i+0x130>
 80044f8:	2301      	movs	r3, #1
 80044fa:	464a      	mov	r2, r9
 80044fc:	4639      	mov	r1, r7
 80044fe:	4630      	mov	r0, r6
 8004500:	47c0      	blx	r8
 8004502:	3001      	adds	r0, #1
 8004504:	d09a      	beq.n	800443c <_printf_i+0x12c>
 8004506:	3501      	adds	r5, #1
 8004508:	68e3      	ldr	r3, [r4, #12]
 800450a:	9a03      	ldr	r2, [sp, #12]
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	42ab      	cmp	r3, r5
 8004510:	dcf2      	bgt.n	80044f8 <_printf_i+0x1e8>
 8004512:	e7eb      	b.n	80044ec <_printf_i+0x1dc>
 8004514:	2500      	movs	r5, #0
 8004516:	f104 0919 	add.w	r9, r4, #25
 800451a:	e7f5      	b.n	8004508 <_printf_i+0x1f8>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1ac      	bne.n	800447a <_printf_i+0x16a>
 8004520:	7803      	ldrb	r3, [r0, #0]
 8004522:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004526:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800452a:	e76c      	b.n	8004406 <_printf_i+0xf6>
 800452c:	08004737 	.word	0x08004737
 8004530:	08004748 	.word	0x08004748

08004534 <_sbrk_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4c06      	ldr	r4, [pc, #24]	; (8004550 <_sbrk_r+0x1c>)
 8004538:	2300      	movs	r3, #0
 800453a:	4605      	mov	r5, r0
 800453c:	4608      	mov	r0, r1
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	f7fd f8c6 	bl	80016d0 <_sbrk>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_sbrk_r+0x1a>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	b103      	cbz	r3, 800454e <_sbrk_r+0x1a>
 800454c:	602b      	str	r3, [r5, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	2000069c 	.word	0x2000069c

08004554 <__ascii_wctomb>:
 8004554:	b149      	cbz	r1, 800456a <__ascii_wctomb+0x16>
 8004556:	2aff      	cmp	r2, #255	; 0xff
 8004558:	bf85      	ittet	hi
 800455a:	238a      	movhi	r3, #138	; 0x8a
 800455c:	6003      	strhi	r3, [r0, #0]
 800455e:	700a      	strbls	r2, [r1, #0]
 8004560:	f04f 30ff 	movhi.w	r0, #4294967295
 8004564:	bf98      	it	ls
 8004566:	2001      	movls	r0, #1
 8004568:	4770      	bx	lr
 800456a:	4608      	mov	r0, r1
 800456c:	4770      	bx	lr

0800456e <memcpy>:
 800456e:	b510      	push	{r4, lr}
 8004570:	1e43      	subs	r3, r0, #1
 8004572:	440a      	add	r2, r1
 8004574:	4291      	cmp	r1, r2
 8004576:	d100      	bne.n	800457a <memcpy+0xc>
 8004578:	bd10      	pop	{r4, pc}
 800457a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004582:	e7f7      	b.n	8004574 <memcpy+0x6>

08004584 <memmove>:
 8004584:	4288      	cmp	r0, r1
 8004586:	b510      	push	{r4, lr}
 8004588:	eb01 0302 	add.w	r3, r1, r2
 800458c:	d807      	bhi.n	800459e <memmove+0x1a>
 800458e:	1e42      	subs	r2, r0, #1
 8004590:	4299      	cmp	r1, r3
 8004592:	d00a      	beq.n	80045aa <memmove+0x26>
 8004594:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004598:	f802 4f01 	strb.w	r4, [r2, #1]!
 800459c:	e7f8      	b.n	8004590 <memmove+0xc>
 800459e:	4283      	cmp	r3, r0
 80045a0:	d9f5      	bls.n	800458e <memmove+0xa>
 80045a2:	1881      	adds	r1, r0, r2
 80045a4:	1ad2      	subs	r2, r2, r3
 80045a6:	42d3      	cmn	r3, r2
 80045a8:	d100      	bne.n	80045ac <memmove+0x28>
 80045aa:	bd10      	pop	{r4, pc}
 80045ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80045b4:	e7f7      	b.n	80045a6 <memmove+0x22>

080045b6 <__malloc_lock>:
 80045b6:	4770      	bx	lr

080045b8 <__malloc_unlock>:
 80045b8:	4770      	bx	lr

080045ba <_realloc_r>:
 80045ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045bc:	4607      	mov	r7, r0
 80045be:	4614      	mov	r4, r2
 80045c0:	460e      	mov	r6, r1
 80045c2:	b921      	cbnz	r1, 80045ce <_realloc_r+0x14>
 80045c4:	4611      	mov	r1, r2
 80045c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045ca:	f7ff bc7f 	b.w	8003ecc <_malloc_r>
 80045ce:	b922      	cbnz	r2, 80045da <_realloc_r+0x20>
 80045d0:	f7ff fc2e 	bl	8003e30 <_free_r>
 80045d4:	4625      	mov	r5, r4
 80045d6:	4628      	mov	r0, r5
 80045d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045da:	f000 f814 	bl	8004606 <_malloc_usable_size_r>
 80045de:	42a0      	cmp	r0, r4
 80045e0:	d20f      	bcs.n	8004602 <_realloc_r+0x48>
 80045e2:	4621      	mov	r1, r4
 80045e4:	4638      	mov	r0, r7
 80045e6:	f7ff fc71 	bl	8003ecc <_malloc_r>
 80045ea:	4605      	mov	r5, r0
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d0f2      	beq.n	80045d6 <_realloc_r+0x1c>
 80045f0:	4631      	mov	r1, r6
 80045f2:	4622      	mov	r2, r4
 80045f4:	f7ff ffbb 	bl	800456e <memcpy>
 80045f8:	4631      	mov	r1, r6
 80045fa:	4638      	mov	r0, r7
 80045fc:	f7ff fc18 	bl	8003e30 <_free_r>
 8004600:	e7e9      	b.n	80045d6 <_realloc_r+0x1c>
 8004602:	4635      	mov	r5, r6
 8004604:	e7e7      	b.n	80045d6 <_realloc_r+0x1c>

08004606 <_malloc_usable_size_r>:
 8004606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800460a:	1f18      	subs	r0, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	bfbc      	itt	lt
 8004610:	580b      	ldrlt	r3, [r1, r0]
 8004612:	18c0      	addlt	r0, r0, r3
 8004614:	4770      	bx	lr
	...

08004618 <_init>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr

08004624 <_fini>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	bf00      	nop
 8004628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462a:	bc08      	pop	{r3}
 800462c:	469e      	mov	lr, r3
 800462e:	4770      	bx	lr
